const { request, gql } = require('graphql-request');
const fs = require('fs');
const path = require('path');
const express = require('express');
const axios = require('axios');
const cookieParser = require('cookie-parser');
require('dotenv').config();
const cors = require('cors');
const Anthropic = require('@anthropic-ai/sdk');

const app = express();        // <--- cette ligne AVANT app.use()

// Stockage s√©curis√© des states OAuth (en production, utiliser Redis)
const stateStore = new Map();

// Rate limiting simple (en production, utiliser Redis ou un middleware d√©di√©)
const rateLimitStore = new Map();
const RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15 minutes
const RATE_LIMIT_MAX_REQUESTS = 100; // 100 requ√™tes par fen√™tre

function checkRateLimit(ip) {
  const now = Date.now();
  const windowStart = now - RATE_LIMIT_WINDOW;
  
  if (!rateLimitStore.has(ip)) {
    rateLimitStore.set(ip, []);
  }
  
  const requests = rateLimitStore.get(ip);
  const validRequests = requests.filter(timestamp => timestamp > windowStart);
  
  if (validRequests.length >= RATE_LIMIT_MAX_REQUESTS) {
    return false;
  }
  
  validRequests.push(now);
  rateLimitStore.set(ip, validRequests);
  return true;
}

// Middleware de rate limiting
app.use((req, res, next) => {
  const ip = req.ip || req.connection.remoteAddress;
  
  if (!checkRateLimit(ip)) {
    return res.status(429).json({
      success: false,
      error: 'Rate limit exceeded. Please try again later.'
    });
  }
  
  next();
});

// Fonctions utilitaires de s√©curit√©
const crypto = require('crypto');

function encryptToken(token) {
  const algorithm = 'aes-256-cbc';
  const key = crypto.scryptSync(process.env.ENCRYPTION_KEY || 'default-key-change-in-prod', 'salt', 32);
  const iv = crypto.randomBytes(16);
  const cipher = crypto.createCipher(algorithm, key);
  let encrypted = cipher.update(token, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return { encrypted, iv: iv.toString('hex') };
}

function decryptToken(encrypted, iv) {
  const algorithm = 'aes-256-cbc';
  const key = crypto.scryptSync(process.env.ENCRYPTION_KEY || 'default-key-change-in-prod', 'salt', 32);
  const decipher = crypto.createDecipher(algorithm, key);
  let decrypted = decipher.update(encrypted, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Sanitization des inputs
function sanitizeInput(input) {
  if (typeof input !== 'string') return input;
  return input
    .replace(/[<>]/g, '') // Supprimer les balises HTML
    .replace(/javascript:/gi, '') // Supprimer les protocoles dangereux
    .trim();
}

// Sanitization des logs
function sanitizeLog(message) {
  if (typeof message !== 'string') return '[Object]';
  return message
    .replace(/password|token|secret|key/gi, '[REDACTED]')
    .replace(/[<>]/g, '')
    .substring(0, 1000); // Limiter la longueur
}

app.use(cors());
app.use(cookieParser());



app.get('/', (req, res) => {
  // Shopify va appeler la racine avec ?shop=xxx lors de l'installation personnalis√©e
  const shop = req.query.shop;
  if (shop) {
    // Redirige vers le flow OAuth natif (toujours dynamique)
    res.redirect(`/auth?shop=${shop}`);
  } else {
    // Si jamais pas de shop, affiche un message d'erreur simple
    res.send('Param√®tre "shop" manquant dans l‚ÄôURL.');
  }
});

const {
  SHOPIFY_API_KEY,
  SHOPIFY_API_SECRET,
  SHOPIFY_SCOPES,
  SHOPIFY_APP_URL,
} = process.env;

// 1. Lancement du flow OAuth s√©curis√©
app.get('/auth', (req, res) => {
  const shop = req.query.shop;
  if (!shop) return res.status(400).send('Param√®tre "shop" manquant');
  
  // Validation du domaine Shopify
  if (!shop.match(/^[a-zA-Z0-9][a-zA-Z0-9-]*\.myshopify\.com$/)) {
    return res.status(400).send('Domaine Shopify invalide');
  }
  
  // G√©n√©ration d'un state unique et s√©curis√©
  const crypto = require('crypto');
  const state = crypto.randomBytes(32).toString('hex');
  
  // Stockage temporaire du state (en production, utiliser Redis)
  const stateStore = new Map();
  stateStore.set(state, {
    shop: shop,
    timestamp: Date.now(),
    ip: req.ip
  });
  
  // Nettoyage des states expir√©s (plus de 10 minutes)
  const now = Date.now();
  for (const [key, value] of stateStore.entries()) {
    if (now - value.timestamp > 600000) { // 10 minutes
      stateStore.delete(key);
    }
  }
  
  const redirectUri = `${SHOPIFY_APP_URL}/auth/callback`;
  const installUrl =
    `https://${shop}/admin/oauth/authorize` +
    `?client_id=${SHOPIFY_API_KEY}` +
    `&scope=${SHOPIFY_SCOPES}` +
    `&redirect_uri=${redirectUri}` +
    `&state=${state}` +
    `&grant_options[]=per-user`;

  res.redirect(installUrl);
});

// 2. Callback OAuth - r√©cup√©ration du token
app.get('/auth/callback', async (req, res) => {
  const { shop, code } = req.query;
  if (!shop || !code) return res.send('Param√®tres manquants');

  try {
    const tokenResponse = await axios.post(`https://${shop}/admin/oauth/access_token`, {
      client_id: SHOPIFY_API_KEY,
      client_secret: SHOPIFY_API_SECRET,
      code,
    });

   const { access_token } = tokenResponse.data;

// ======= Gestion du stockage des tokens =======
const tokensPath = path.join(__dirname, 'shop_tokens.json');
let shopTokens = {};
if (fs.existsSync(tokensPath)) {
  shopTokens = JSON.parse(fs.readFileSync(tokensPath));
}
shopTokens[shop] = access_token;
fs.writeFileSync(tokensPath, JSON.stringify(shopTokens, null, 2));
console.log(`‚úÖ [${shop}] Nouveau token sauvegard√©`);
// ==============================================

res.send('OAuth Shopify r√©ussi‚ÄØ! Tu peux continuer le dev.');
  } catch (error) {
    console.error('Erreur OAuth Shopify:', error.response?.data || error.message);
    res.status(500).send('Erreur lors du callback OAuth');
  }
});


// Endpoint pour lister les produits de la boutique connect√©e
app.get('/products', async (req, res) => {
  const shop = 'adlign.myshopify.com'; // adapte au tien si besoin
  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  const access_token = shopTokens[shop];

  if (!access_token) {
    return res.status(401).send('Token Shopify manquant pour ce shop');
  }

  try {
    const response = await axios.get(`https://${shop}/admin/api/2024-07/products.json`, {
      headers: {
        'X-Shopify-Access-Token': access_token,
      },
    });
    res.json(response.data);
  } catch (error) {
    console.error('Erreur API Shopify :', error.response?.data || error.message);
    res.status(500).send('Erreur API Shopify');
  }
});

// PORT sera d√©fini plus tard

// ===== SYST√àME HYBRIDE - STOCKAGE LOCAL LANDING PAGES =====

// Cr√©er une landing page avec stockage local (alternative aux metaobjects)
app.post('/create-local-landing', express.json(), async (req, res) => {
  const { shop_domain, landing_data } = req.body;
  
  if (!shop_domain || !landing_data) {
    return res.status(400).json({ 
      success: false, 
      error: 'shop_domain et landing_data requis' 
    });
  }

  if (!landing_data.handle || !landing_data.mapping_id) {
    return res.status(400).json({ 
      success: false, 
      error: 'handle et mapping_id requis dans landing_data' 
    });
  }

  try {
    console.log(`üöÄ Cr√©ation landing page locale: ${landing_data.handle} pour ${shop_domain}`);
    
    // Ajouter m√©tadonn√©es
    const landingWithMeta = {
      ...landing_data,
      id: `landing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      shop_domain: shop_domain,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    // Stockage local dans un fichier JSON
    const landingsPath = path.join(__dirname, 'local_landings.json');
    let allLandings = {};
    
    if (fs.existsSync(landingsPath)) {
      allLandings = JSON.parse(fs.readFileSync(landingsPath, 'utf8'));
    }

    if (!allLandings[shop_domain]) {
      allLandings[shop_domain] = {};
    }

    allLandings[shop_domain][landing_data.handle] = landingWithMeta;
    
    fs.writeFileSync(landingsPath, JSON.stringify(allLandings, null, 2));

    console.log(`‚úÖ Landing page locale cr√©√©e: ${landing_data.handle}`);

    res.json({ 
      success: true, 
      message: `Landing page "${landing_data.handle}" cr√©√©e avec succ√®s (stockage local)`,
      landing: landingWithMeta,
      storage_type: "local_json"
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation landing page locale:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors de la cr√©ation de la landing page locale',
      message: error.message 
    });
  }
});

// R√©cup√©rer une landing page locale par handle
app.get('/local-landing/:handle', async (req, res) => {
  const { handle } = req.params;
  const { shop_domain } = req.query;

  if (!shop_domain) {
    return res.status(400).json({ 
      success: false, 
      error: 'shop_domain requis en query parameter' 
    });
  }

  try {
    console.log(`üîç R√©cup√©ration landing page locale: ${handle} pour ${shop_domain}`);
    
    const landingsPath = path.join(__dirname, 'local_landings.json');
    
    if (!fs.existsSync(landingsPath)) {
      return res.status(404).json({ 
        success: false, 
        error: `Aucune landing page trouv√©e` 
      });
    }

    const allLandings = JSON.parse(fs.readFileSync(landingsPath, 'utf8'));
    
    if (!allLandings[shop_domain] || !allLandings[shop_domain][handle]) {
      return res.status(404).json({ 
        success: false, 
        error: `Landing page "${handle}" non trouv√©e pour ${shop_domain}` 
      });
    }

    const landing = allLandings[shop_domain][handle];

    console.log(`‚úÖ Landing page locale trouv√©e: ${handle}`);

    res.json({ 
      success: true, 
      landing: landing,
      storage_type: "local_json"
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration landing page locale:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors de la r√©cup√©ration de la landing page locale',
      message: error.message 
    });
  }
});

// Lister toutes les landing pages locales d'une boutique
app.get('/local-landings/:shop_domain', async (req, res) => {
  const { shop_domain } = req.params;

  try {
    console.log(`üìã Liste des landing pages locales pour ${shop_domain}`);
    
    const landingsPath = path.join(__dirname, 'local_landings.json');
    
    if (!fs.existsSync(landingsPath)) {
      return res.json({ 
        success: true, 
        count: 0,
        landings: [],
        storage_type: "local_json"
      });
    }

    const allLandings = JSON.parse(fs.readFileSync(landingsPath, 'utf8'));
    
    if (!allLandings[shop_domain]) {
      return res.json({ 
        success: true, 
        count: 0,
        landings: [],
        storage_type: "local_json"
      });
    }

    const landings = Object.values(allLandings[shop_domain]);

    console.log(`‚úÖ ${landings.length} landing pages locales trouv√©es`);

    res.json({ 
      success: true, 
      count: landings.length,
      landings: landings,
      storage_type: "local_json"
    });

  } catch (error) {
    console.error('‚ùå Erreur liste landing pages locales:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors de la r√©cup√©ration des landing pages locales',
      message: error.message 
    });
  }
});

// Route de test pour workflow complet avec stockage local : Landing Page + Mapping
app.post('/test-local-workflow', express.json(), async (req, res) => {
  const { shop_domain, landing_handle } = req.body;
  
  if (!shop_domain || !landing_handle) {
    return res.status(400).json({ 
      success: false, 
      error: 'shop_domain et landing_handle requis' 
    });
  }

  try {
    console.log(`üß™ Test workflow local complet: ${landing_handle} pour ${shop_domain}`);
    
    // 1. R√©cup√©rer la landing page locale
    const landingResponse = await fetch(`http://localhost:3000/local-landing/${landing_handle}?shop_domain=${shop_domain}`);
    const landingResult = await landingResponse.json();
    
    if (!landingResult.success) {
      return res.status(404).json({ 
        success: false, 
        error: 'Landing page locale non trouv√©e',
        details: landingResult 
      });
    }

    // 2. R√©cup√©rer le mapping associ√©
    const mapping_id = landingResult.landing.mapping_id;
    const mappingResponse = await fetch(`http://localhost:3000/mapping/${mapping_id}`);
    const mappingResult = await mappingResponse.json();
    
    if (!mappingResult.success) {
      return res.status(404).json({ 
        success: false, 
        error: 'Mapping non trouv√©',
        details: mappingResult 
      });
    }

    // 3. Simuler le remplacement des √©l√©ments
    const replacements = {};
    const landingData = landingResult.landing;
    const mappingData = mappingResult.mapping.mapping;

    // Mapper le contenu personnalis√© avec les s√©lecteurs CSS
    if (landingData.custom_title && mappingData.product_title) {
      replacements.product_title = {
        selector: mappingData.product_title.selector,
        original_content: "{{ product.title }}",
        new_content: landingData.custom_title,
        type: "text"
      };
    }

    if (landingData.custom_price_text && mappingData.product_price) {
      replacements.product_price = {
        selector: mappingData.product_price.selector,
        original_content: "{{ product.price | money }}",
        new_content: landingData.custom_price_text,
        type: "text"
      };
    }

    if (landingData.custom_cta_text && mappingData.add_to_cart) {
      replacements.add_to_cart = {
        selector: mappingData.add_to_cart.selector,
        original_content: "Ajouter au panier",
        new_content: landingData.custom_cta_text,
        type: "text"
      };
    }

    if (landingData.custom_description && mappingData.product_description) {
      replacements.product_description = {
        selector: mappingData.product_description.selector,
        original_content: "{{ product.description }}",
        new_content: landingData.custom_description,
        type: "text"
      };
    }

    // Ajouter mapping pour galerie et inventaire (nouveaux √©l√©ments d√©tect√©s)
    if (mappingData.product_gallery) {
      replacements.product_gallery = {
        selector: mappingData.product_gallery.selector,
        original_content: "galerie originale",
        new_content: landingData.custom_main_image || "image personnalis√©e",
        type: "image"
      };
    }

    if (mappingData.variant_selector) {
      replacements.variant_selector = {
        selector: mappingData.variant_selector.selector,
        original_content: "s√©lecteur original",
        new_content: "Choisir une option",
        type: "component"
      };
    }

    // G√©n√©rer le script JS pour le frontend
    const jsScript = generateLandingScript(replacements, landingData);

    console.log(`‚úÖ Workflow local test√©: ${Object.keys(replacements).length} √©l√©ments √† remplacer`);

    res.json({ 
      success: true, 
      message: `Workflow local complet test√© pour "${landing_handle}"`,
      storage_type: "local_json",
      landing: landingResult.landing,
      mapping: mappingData,
      replacements: replacements,
      elements_count: Object.keys(replacements).length,
      js_script: jsScript
    });

  } catch (error) {
    console.error('‚ùå Erreur test workflow local complet:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors du test du workflow local complet',
      message: error.message 
    });
  }
});

// Cr√©er le type metaobject Adlign Landing Page - Version Compl√®te
app.post('/create-adlign-metaobject-type', express.json(), async (req, res) => {
  const { shop_domain } = req.body;
  if (!shop_domain) {
    return res.status(400).json({ error: 'shop_domain requis' });
  }

  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  const access_token = shopTokens[shop_domain];

  if (!access_token) {
    return res.status(401).json({ error: 'Token Shopify manquant pour ce shop' });
  }

  const endpoint = `https://${shop_domain}/admin/api/2024-07/graphql.json`;

  // Structure metaobject compl√®te bas√©e sur les 19 √©l√©ments d√©tect√©s par l'IA
  const mutation = gql`
  mutation {
    metaobjectDefinitionCreate(
      definition: {
        name: "Adlign Landing Page"
        type: "page"
                         access: { storefront: PUBLIC_READ }
        fieldDefinitions: [
                               # M√âTADONN√âES DE LA LANDING
                     { name: "Handle Unique", key: "landing_handle", type: "single_line_text_field", required: true, description: "Identifiant unique (ex: landing-promo-noel-2024)" }
          { name: "Nom de Campagne", key: "campaign_name", type: "single_line_text_field", required: false, description: "Nom de la campagne marketing" }
          { name: "ID Mapping Th√®me", key: "mapping_id", type: "single_line_text_field", required: true, description: "ID du mapping g√©n√©r√© par l'IA" }
          { name: "Domaine Boutique", key: "shop_domain", type: "single_line_text_field", required: true, description: "Domaine de la boutique Shopify" }
          
          # √âL√âMENTS TEXTUELS (7 champs)
          { name: "Titre Personnalis√©", key: "custom_title", type: "single_line_text_field", required: false, description: "Remplace le titre produit original" }
          { name: "Description Personnalis√©e", key: "custom_description", type: "multi_line_text_field", required: false, description: "Remplace la description produit" }
          { name: "Texte Prix Personnalis√©", key: "custom_price_text", type: "single_line_text_field", required: false, description: "Prix avec mise en forme" }
          { name: "Texte Bouton CTA", key: "custom_cta_text", type: "single_line_text_field", required: false, description: "Texte du bouton d'ajout panier" }
          { name: "Badges Personnalis√©s", key: "custom_badges", type: "multi_line_text_field", required: false, description: "Badges promotionnels (JSON array)" }
          { name: "Marque Personnalis√©e", key: "custom_vendor", type: "single_line_text_field", required: false }
          { name: "Message d'Urgence", key: "custom_urgency_text", type: "single_line_text_field", required: false, description: "Message de raret√©/urgence" }
          
          # √âL√âMENTS VISUELS (4 champs)
          { name: "Image Principale", key: "custom_main_image", type: "file_reference", required: false, description: "Remplace l'image produit principale" }
          { name: "Galerie Images", key: "custom_gallery", type: "list.file_reference", required: false, description: "Images suppl√©mentaires" }
          { name: "URL Vid√©o", key: "custom_video_url", type: "url", required: false, description: "Vid√©o de d√©monstration" }
          { name: "Badges de Confiance", key: "custom_trust_badges", type: "list.file_reference", required: false, description: "Logos s√©curit√©, garanties" }
          
          # √âL√âMENTS COMMERCIAUX (3 champs)
          { name: "Info Livraison", key: "custom_shipping_text", type: "single_line_text_field", required: false, description: "Message livraison personnalis√©" }
          { name: "Code Promo", key: "custom_discount_code", type: "single_line_text_field", required: false }
          { name: "Produits Upsell", key: "custom_upsell_products", type: "list.product_reference", required: false, description: "Produits recommand√©s" }
          
          # CONFIGURATION AVANC√âE (5 champs)
          { name: "Landing Active", key: "is_active", type: "boolean", required: false, description: "Si la landing est active" }
          { name: "Groupe A/B Test", key: "ab_test_group", type: "single_line_text_field", required: false, description: "Version A, B, C..." }
          { name: "Audience Cible", key: "target_audience", type: "single_line_text_field", required: false, description: "Segment marketing cibl√©" }
          { name: "CSS Personnalis√©", key: "custom_css", type: "multi_line_text_field", required: false, description: "Styles CSS additionnels" }
          { name: "Donn√©es Analytics", key: "analytics_data", type: "json", required: false, description: "M√©triques de performance" }
        ]
      }
    ) {
      metaobjectDefinition {
        id
        name
        type
        fieldDefinitions {
          name
          key
          type {
            name
          }
        }
      }
      userErrors {
        field
        message
      }
    }
  }
`;


  try {
    console.log(`üèóÔ∏è Cr√©ation du type metaobject Adlign Landing Page pour ${shop_domain}`);
    
    const data = await request(
      endpoint,
      mutation,
      {},
      {
        "X-Shopify-Access-Token": access_token,
        "Content-Type": "application/json",
      }
    );
    
    if (data.metaobjectDefinitionCreate.userErrors.length > 0) {
      console.error('‚ùå Erreurs lors de la cr√©ation:', data.metaobjectDefinitionCreate.userErrors);
      return res.status(400).json({ 
        success: false, 
        errors: data.metaobjectDefinitionCreate.userErrors 
      });
    }
    
    const metaobjectDef = data.metaobjectDefinitionCreate.metaobjectDefinition;
    console.log(`‚úÖ Type metaobject cr√©√©: ${metaobjectDef.name} (${metaobjectDef.type})`);
    console.log(`üìä ${metaobjectDef.fieldDefinitions.length} champs cr√©√©s`);
    
    res.json({ 
      success: true, 
      message: `Type metaobject "Adlign Landing Page" cr√©√© avec ${metaobjectDef.fieldDefinitions.length} champs`,
      metaobjectDefinition: metaobjectDef 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation metaobject type:', error);
    
    if (error.response && error.response.errors) {
      console.error('D√©tails GraphQL:', error.response.errors);
      return res.status(500).json({ success: false, errors: error.response.errors });
    }
    if (error.response && error.response.data) {
      console.error('Donn√©es r√©ponse:', error.response.data);
      return res.status(500).json({ success: false, errors: error.response.data });
    }
    
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors de la cr√©ation du type metaobject',
      message: error.message 
    });
  }
});

// ===== ROUTES CRUD POUR LES LANDING PAGES =====

// Cr√©er une nouvelle landing page
app.post('/create-adlign-landing', express.json(), async (req, res) => {
  const { shop_domain, landing_data } = req.body;
  
  if (!shop_domain || !landing_data) {
    return res.status(400).json({ 
      success: false, 
      error: 'shop_domain et landing_data requis' 
    });
  }

  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  const access_token = shopTokens[shop_domain];

  if (!access_token) {
    return res.status(401).json({ 
      success: false, 
      error: 'Token Shopify manquant pour ce shop' 
    });
  }

  const endpoint = `https://${shop_domain}/admin/api/2024-07/graphql.json`;

  // Construire les champs pour la mutation
  const buildFieldsForMutation = (data) => {
    const fields = [];
    
    // Champs obligatoires
    if (data.handle) fields.push(`{ key: "handle", value: "${data.handle}" }`);
    if (data.mapping_id) fields.push(`{ key: "mapping_id", value: "${data.mapping_id}" }`);
    if (data.shop_domain) fields.push(`{ key: "shop_domain", value: "${data.shop_domain}" }`);
    
    // Champs optionnels textuels
    if (data.campaign_name) fields.push(`{ key: "campaign_name", value: "${data.campaign_name}" }`);
    if (data.custom_title) fields.push(`{ key: "custom_title", value: "${data.custom_title}" }`);
    if (data.custom_description) fields.push(`{ key: "custom_description", value: "${data.custom_description}" }`);
    if (data.custom_price_text) fields.push(`{ key: "custom_price_text", value: "${data.custom_price_text}" }`);
    if (data.custom_cta_text) fields.push(`{ key: "custom_cta_text", value: "${data.custom_cta_text}" }`);
    if (data.custom_badges) fields.push(`{ key: "custom_badges", value: "${data.custom_badges}" }`);
    if (data.custom_vendor) fields.push(`{ key: "custom_vendor", value: "${data.custom_vendor}" }`);
    if (data.custom_urgency_text) fields.push(`{ key: "custom_urgency_text", value: "${data.custom_urgency_text}" }`);
    if (data.custom_shipping_text) fields.push(`{ key: "custom_shipping_text", value: "${data.custom_shipping_text}" }`);
    if (data.custom_discount_code) fields.push(`{ key: "custom_discount_code", value: "${data.custom_discount_code}" }`);
    if (data.ab_test_group) fields.push(`{ key: "ab_test_group", value: "${data.ab_test_group}" }`);
    if (data.target_audience) fields.push(`{ key: "target_audience", value: "${data.target_audience}" }`);
    if (data.custom_css) fields.push(`{ key: "custom_css", value: "${data.custom_css}" }`);
    
    // Champ boolean
    if (typeof data.is_active === 'boolean') {
      fields.push(`{ key: "is_active", value: "${data.is_active}" }`);
    }
    
    // URL
    if (data.custom_video_url) fields.push(`{ key: "custom_video_url", value: "${data.custom_video_url}" }`);
    
    return fields.join(',\n          ');
  };

  const mutation = gql`
  mutation {
    metaobjectCreate(
      metaobject: {
        type: "adlign_landing_page"
        fields: [
          ${buildFieldsForMutation(landing_data)}
        ]
      }
    ) {
      metaobject {
        id
        handle
        fields {
          key
          value
        }
      }
      userErrors {
        field
        message
      }
    }
  }
  `;

  try {
    console.log(`üöÄ Cr√©ation landing page: ${landing_data.handle} pour ${shop_domain}`);
    
    const data = await request(endpoint, mutation, {}, {
      "X-Shopify-Access-Token": access_token,
      "Content-Type": "application/json",
    });

    if (data.metaobjectCreate.userErrors.length > 0) {
      console.error('‚ùå Erreurs cr√©ation landing:', data.metaobjectCreate.userErrors);
      return res.status(400).json({ 
        success: false, 
        errors: data.metaobjectCreate.userErrors 
      });
    }

    const metaobject = data.metaobjectCreate.metaobject;
    console.log(`‚úÖ Landing page cr√©√©e: ${metaobject.handle}`);

    res.json({ 
      success: true, 
      message: `Landing page "${landing_data.handle}" cr√©√©e avec succ√®s`,
      metaobject: metaobject 
    });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation landing page:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors de la cr√©ation de la landing page',
      message: error.message 
    });
  }
});

// R√©cup√©rer une landing page par handle
app.get('/adlign-landing/:handle', async (req, res) => {
  const { handle } = req.params;
  const { shop_domain } = req.query;

  if (!shop_domain) {
    return res.status(400).json({ 
      success: false, 
      error: 'shop_domain requis en query parameter' 
    });
  }

  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  const access_token = shopTokens[shop_domain];

  if (!access_token) {
    return res.status(401).json({ 
      success: false, 
      error: 'Token Shopify manquant pour ce shop' 
    });
  }

  const endpoint = `https://${shop_domain}/admin/api/2024-07/graphql.json`;

  const query = gql`
  query {
    metaobject(id: "gid://shopify/Metaobject/adlign_landing_page/${handle}") {
      id
      handle
      type
      fields {
        key
        value
      }
    }
  }
  `;

  try {
    console.log(`üîç R√©cup√©ration landing page: ${handle} pour ${shop_domain}`);
    
    const data = await request(endpoint, query, {}, {
      "X-Shopify-Access-Token": access_token,
      "Content-Type": "application/json",
    });

    if (!data.metaobject) {
      return res.status(404).json({ 
        success: false, 
        error: `Landing page "${handle}" non trouv√©e` 
      });
    }

    // Transformer les fields en objet plus lisible
    const landingData = {};
    data.metaobject.fields.forEach(field => {
      landingData[field.key] = field.value;
    });

    console.log(`‚úÖ Landing page trouv√©e: ${handle}`);

    res.json({ 
      success: true, 
      landing: {
        id: data.metaobject.id,
        handle: data.metaobject.handle,
        type: data.metaobject.type,
        data: landingData
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration landing page:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors de la r√©cup√©ration de la landing page',
      message: error.message 
    });
  }
});

// Lister toutes les landing pages d'une boutique
app.get('/adlign-landings/:shop_domain', async (req, res) => {
  const { shop_domain } = req.params;

  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  const access_token = shopTokens[shop_domain];

  if (!access_token) {
    return res.status(401).json({ 
      success: false, 
      error: 'Token Shopify manquant pour ce shop' 
    });
  }

  const endpoint = `https://${shop_domain}/admin/api/2024-07/graphql.json`;

  const query = gql`
  query {
    metaobjects(type: "adlign_landing_page", first: 50) {
      edges {
        node {
          id
          handle
          fields {
            key
            value
          }
        }
      }
    }
  }
  `;

  try {
    console.log(`üìã Liste des landing pages pour ${shop_domain}`);
    
    const data = await request(endpoint, query, {}, {
      "X-Shopify-Access-Token": access_token,
      "Content-Type": "application/json",
    });

    const landings = data.metaobjects.edges.map(edge => {
      const landingData = {};
      edge.node.fields.forEach(field => {
        landingData[field.key] = field.value;
      });
      
      return {
        id: edge.node.id,
        handle: edge.node.handle,
        data: landingData
      };
    });

    console.log(`‚úÖ ${landings.length} landing pages trouv√©es`);

    res.json({ 
      success: true, 
      count: landings.length,
      landings: landings 
    });

  } catch (error) {
    console.error('‚ùå Erreur liste landing pages:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors de la r√©cup√©ration des landing pages',
      message: error.message 
    });
  }
});

// Route de test pour workflow complet : Landing Page + Mapping
app.post('/test-complete-workflow', express.json(), async (req, res) => {
  const { shop_domain, landing_handle } = req.body;
  
  if (!shop_domain || !landing_handle) {
    return res.status(400).json({ 
      success: false, 
      error: 'shop_domain et landing_handle requis' 
    });
  }

  try {
    console.log(`üß™ Test workflow complet: ${landing_handle} pour ${shop_domain}`);
    
    // 1. R√©cup√©rer la landing page
    const landingResponse = await fetch(`http://localhost:3000/adlign-landing/${landing_handle}?shop_domain=${shop_domain}`);
    const landingResult = await landingResponse.json();
    
    if (!landingResult.success) {
      return res.status(404).json({ 
        success: false, 
        error: 'Landing page non trouv√©e',
        details: landingResult 
      });
    }

    // 2. R√©cup√©rer le mapping associ√©
    const mapping_id = landingResult.landing.data.mapping_id;
    const mappingResponse = await fetch(`http://localhost:3000/mapping/${mapping_id}`);
    const mappingResult = await mappingResponse.json();
    
    if (!mappingResult.success) {
      return res.status(404).json({ 
        success: false, 
        error: 'Mapping non trouv√©',
        details: mappingResult 
      });
    }

    // 3. Simuler le remplacement des √©l√©ments
    const replacements = {};
    const landingData = landingResult.landing.data;
    const mappingData = mappingResult.mapping;

    // Mapper le contenu personnalis√© avec les s√©lecteurs CSS
    if (landingData.custom_title && mappingData.product_title) {
      replacements.product_title = {
        selector: mappingData.product_title.selector,
        original_content: "{{ product.title }}",
        new_content: landingData.custom_title,
        type: "text"
      };
    }

    if (landingData.custom_price_text && mappingData.product_price) {
      replacements.product_price = {
        selector: mappingData.product_price.selector,
        original_content: "{{ product.price | money }}",
        new_content: landingData.custom_price_text,
        type: "text"
      };
    }

    if (landingData.custom_cta_text && mappingData.add_to_cart) {
      replacements.add_to_cart = {
        selector: mappingData.add_to_cart.selector,
        original_content: "Ajouter au panier",
        new_content: landingData.custom_cta_text,
        type: "text"
      };
    }

    if (landingData.custom_description && mappingData.product_description) {
      replacements.product_description = {
        selector: mappingData.product_description.selector,
        original_content: "{{ product.description }}",
        new_content: landingData.custom_description,
        type: "text"
      };
    }

    // G√©n√©rer le script JS pour le frontend
    const jsScript = generateLandingScript(replacements, landingData);

    console.log(`‚úÖ Workflow test√©: ${Object.keys(replacements).length} √©l√©ments √† remplacer`);

    res.json({ 
      success: true, 
      message: `Workflow complet test√© pour "${landing_handle}"`,
      landing: landingResult.landing,
      mapping: mappingData,
      replacements: replacements,
      elements_count: Object.keys(replacements).length,
      js_script: jsScript
    });

  } catch (error) {
    console.error('‚ùå Erreur test workflow complet:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Erreur lors du test du workflow complet',
      message: error.message 
    });
  }
});

// Fonction utilitaire pour g√©n√©rer le script JS d'injection
function generateLandingScript(replacements, landingData) {
  const scriptLines = [
    "// Script d'injection Adlign - G√©n√©r√© automatiquement",
    "console.log('üöÄ Adlign Landing Page activ√©e');",
    ""
  ];

  // G√©n√©rer les remplacements
  Object.entries(replacements).forEach(([elementType, replacement]) => {
    scriptLines.push(`// Remplacement: ${elementType}`);
    scriptLines.push(`const ${elementType}Element = document.querySelector('${replacement.selector}');`);
    scriptLines.push(`if (${elementType}Element) {`);
    
    if (replacement.type === 'text') {
      scriptLines.push(`  ${elementType}Element.innerHTML = '${replacement.new_content}';`);
    } else if (replacement.type === 'image') {
      scriptLines.push(`  ${elementType}Element.src = '${replacement.new_content}';`);
    }
    
    scriptLines.push(`  console.log('‚úÖ ${elementType} remplac√©');`);
    scriptLines.push(`} else {`);
    scriptLines.push(`  console.warn('‚ö†Ô∏è √âl√©ment ${elementType} non trouv√©: ${replacement.selector}');`);
    scriptLines.push(`}`);
    scriptLines.push("");
  });

  // Ajouter CSS personnalis√© si pr√©sent
  if (landingData.custom_css) {
    scriptLines.push("// CSS personnalis√©");
    scriptLines.push("const customStyle = document.createElement('style');");
    scriptLines.push(`customStyle.innerHTML = \`${landingData.custom_css}\`;`);
    scriptLines.push("document.head.appendChild(customStyle);");
    scriptLines.push("");
  }

  // Ajouter badges si pr√©sents
  if (landingData.custom_badges) {
    scriptLines.push("// Badges personnalis√©s");
    scriptLines.push(`const badges = '${landingData.custom_badges}'.split(',');`);
    scriptLines.push("badges.forEach(badge => {");
    scriptLines.push("  const badgeElement = document.createElement('span');");
    scriptLines.push("  badgeElement.className = 'adlign-badge';");
    scriptLines.push("  badgeElement.textContent = badge.trim();");
    scriptLines.push("  // Ajouter le badge quelque part sur la page");
    scriptLines.push("});");
    scriptLines.push("");
  }

  scriptLines.push("console.log('üéØ Landing page Adlign charg√©e avec succ√®s');");

  return scriptLines.join('\n');
}

app.post('/create-landing', express.json(), async (req, res) => {
  const shop = 'adlign.myshopify.com'; // √† rendre dynamique plus tard
  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  const access_token = shopTokens[shop];

  if (!access_token) {
    return res.status(401).send('Token Shopify manquant pour ce shop');
  }

  const endpoint = `https://${shop}/admin/api/2024-07/graphql.json`;

  // R√©cup√©rer le body JSON envoy√© (donn√©es landing)
  const {
    headline,
    hero_image_id,     // ID du fichier image Shopify (pour MVP, √† uploader manuellement d'abord)
    description,
    cta_text,
    special_price,
    video_url,
    product_gid        // Shopify Product GID (ex: "gid://shopify/Product/1234567890")
  } = req.body;

  // Mutation pour cr√©er une instance de metaobject "Landing Adlign"
  const mutation = gql`
    mutation CreateLandingAdlign($fields: [MetaobjectFieldInput!]!) {
      metaobjectCreate(
        metaobject: {
          type: "landing_adlign"
          fields: $fields
        }
      ) {
        metaobject {
          id
          handle
          type
          fields {
            key
            value
          }
        }
        userErrors {
          field
          message
        }
      }
    }
  `;

  const fields = [
  headline && { key: "headline", value: headline },
  hero_image_id && { key: "hero_image", value: hero_image_id },
  description && { key: "description", value: description },
  cta_text && { key: "cta_text", value: cta_text },
  special_price && { key: "special_price", value: special_price.toString() },
  video_url && { key: "video_url", value: video_url },
  product_gid && { key: "product_ref", value: product_gid }
].filter(Boolean);

  try {
    const data = await request(
      endpoint,
      mutation,
      { fields },
      {
        "X-Shopify-Access-Token": access_token,
        "Content-Type": "application/json",
      }
    );
    if (data.metaobjectCreate.userErrors.length > 0) {
      return res.status(400).json({ errors: data.metaobjectCreate.userErrors });
    }
    res.json({ status: "success", metaobject: data.metaobjectCreate.metaobject });
  } catch (error) {
  if (error.response && error.response.data) {
    console.error('Erreur Shopify GraphQL:', error.response.data);
    return res.status(500).json({ errors: error.response.data });
  }
  if (error.response && error.response.errors) {
    console.error('Erreur Shopify GraphQL:', error.response.errors);
    return res.status(500).json({ errors: error.response.errors });
  }
  console.error('Erreur cr√©ation landing:', error.message);
  res.status(500).send('Erreur lors de la cr√©ation de la landing');
}
});

app.get('/list-landings', async (req, res) => {
  const shop = 'adlign.myshopify.com'; // √† rendre dynamique plus tard
  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  const access_token = shopTokens[shop];
  if (!access_token) {
    return res.status(401).send('Token Shopify manquant pour ce shop');
  }

  const endpoint = `https://${shop}/admin/api/2024-07/graphql.json`;
  const query = gql`
    query {
      metaobjects(first: 30, type: "landing_adlign") {
        edges {
          node {
            id
            handle
            fields {
              key
              value
            }
            updatedAt
            createdAt
          }
        }
      }
    }
  `;

  try {
    const data = await request(
      endpoint,
      query,
      {},
      {
        "X-Shopify-Access-Token": access_token,
        "Content-Type": "application/json",
      }
    );
    res.json({ status: 'success', landings: data.metaobjects.edges.map(edge => edge.node) });
  } catch (error) {
    if (error.response && error.response.data) {
      console.error('Erreur Shopify GraphQL:', error.response.data);
      return res.status(500).json({ errors: error.response.data });
    }
    console.error('Erreur listing landings:', error.message);
    res.status(500).send('Erreur lors du listing des landings');
  }
});

// ROUTE TEST MVP : Sert une landing dynamique JSON pour le frontend Shopify
app.get('/landing/:handle', async (req, res) => {
  const { handle } = req.params;
  // Pour MVP : hardcode la landing Adlign ici
  if (handle === 'landing-adlign-llebaq5f') {
    res.json({
      headline: "OFFRE EXCLUSIVE - ECHANTILLON GOURMAND",
      badges: ["NOUVEAU", "SAVON NATUREL"],
      review_count: "1450",
      review_stars: 4.8,
      hero_image: "https://cdn.shopify.com/s/files/1/xxxx/image.jpg",
      subheadline: "Profite d'un test sans engagement, livraison rapide",
      description: "Le savon id√©al pour peaux sensibles, z√©ro parfum, z√©ro allerg√®ne. Fabriqu√© en France, utilis√© par plus de 5000 clients satisfaits.",
      features: [
        "100% naturel",
        "Convient √† toute la famille",
        "Sans allerg√®ne",
        "Z√©ro d√©chet"
      ],
      secondary_images: [
        "https://cdn.shopify.com/s/files/1/xxxx/image1.jpg",
        "https://cdn.shopify.com/s/files/1/xxxx/image2.jpg"
      ],
      blocks: [
        {
          type: "cta",
          text: "J'en profite tout de suite !",
          href: "#add-to-cart"
        }
      ],
      pack_pricing: [
        {
          title: "1 √©chantillon",
          price: "3,90‚Ç¨"
        },
        {
          title: "Pack D√©couverte (3x)",
          price: "9,90‚Ç¨"
        }
      ]
    });
  } else {
    res.status(404).json({ error: 'Not found' });
  }
});

// ===== MAPPING AUTO IA =====

// Route pour analyser la structure du th√®me Shopify et g√©n√©rer le mapping automatique
app.post('/analyze-theme', express.json(), async (req, res) => {
  const { shop_domain } = req.body;
  
  if (!shop_domain) {
    return res.status(400).json({ error: 'shop_domain requis' });
  }

  try {
    console.log(`üîç Analyse de la structure du th√®me: ${shop_domain}`);
    
    // 1. R√©cup√©rer le token d'acc√®s pour ce shop
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopTokens = {};
    if (fs.existsSync(tokensPath)) {
      shopTokens = JSON.parse(fs.readFileSync(tokensPath));
    }
    
    const accessToken = shopTokens[shop_domain];
    if (!accessToken) {
      return res.status(401).json({ 
        error: 'Token Shopify manquant',
        message: `Aucun token trouv√© pour ${shop_domain}. Installez l'app Adlign d'abord.`
      });
    }
    
    // 2. Analyser la structure du th√®me
    const themeStructure = await analyzeThemeStructure(shop_domain, accessToken);
    
    // 3. Analyser avec Claude AI pour am√©liorer le mapping
    const enhancedMapping = await enhanceMappingWithAI(themeStructure, shop_domain, accessToken);
    
    // 4. Sauvegarder le mapping
    const mappingId = saveMapping(shop_domain, `theme_${themeStructure.theme_name}`, enhancedMapping);
    
    res.json({
      success: true,
      mapping_id: mappingId,
      theme_info: {
        id: themeStructure.theme_id,
        name: themeStructure.theme_name,
        files_analyzed: themeStructure.files_analyzed.length
      },
      mapping: enhancedMapping,
      message: `Mapping g√©n√©r√© avec ${Object.keys(enhancedMapping).length} √©l√©ments d√©tect√©s`
    });
    
  } catch (error) {
    console.error('Erreur analyse th√®me:', error);
    res.status(500).json({ error: error.message });
  }
});

// Route pour scan rapide + complet en arri√®re-plan
app.post('/analyze-theme-smart', express.json(), async (req, res) => {
  const { shop_domain } = req.body;
  
  if (!shop_domain) {
    return res.status(400).json({ error: 'shop_domain requis' });
  }

  try {
    console.log(`üöÄ ANALYSE INTELLIGENTE du th√®me: ${shop_domain}`);
    
    // 1. R√©cup√©rer le token d'acc√®s
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopTokens = {};
    if (fs.existsSync(tokensPath)) {
      shopTokens = JSON.parse(fs.readFileSync(tokensPath));
    }
    
    const accessToken = shopTokens[shop_domain];
    if (!accessToken) {
      return res.status(401).json({ 
        error: 'Token Shopify manquant',
        message: `Aucun token trouv√© pour ${shop_domain}. Installez l'app Adlign d'abord.`
      });
    }
    
    // 2. SCAN RAPIDE (15 fichiers les plus importants)
    console.log(`‚ö° SCAN RAPIDE en cours...`);
    const themeStructure = await analyzeThemeStructure(shop_domain, accessToken);
    const enhancedMapping = await enhanceMappingWithAI(themeStructure, shop_domain, accessToken);
    const mappingId = saveMapping(shop_domain, `scan_rapide_${themeStructure.theme_name}`, enhancedMapping);
    
    // 3. R√©ponse imm√©diate avec le scan rapide
    const quickResponse = {
      success: true,
      mapping_id: mappingId,
      scan_type: 'rapide',
      theme_info: {
        id: themeStructure.theme_id,
        name: themeStructure.theme_name,
        files_analyzed: themeStructure.files_analyzed.length
      },
      mapping: enhancedMapping,
      message: `‚ö° Scan rapide termin√©: ${Object.keys(enhancedMapping).length} √©l√©ments d√©tect√©s`,
      background_scan: {
        status: 'en_cours',
        message: 'Scan complet en cours en arri√®re-plan...'
      }
    };
    
    // 4. Lancer le scan complet en arri√®re-plan
    console.log(`üîÑ Lancement du scan complet en arri√®re-plan...`);
    setTimeout(async () => {
      try {
        console.log(`üîç SCAN COMPLET en arri√®re-plan: ${shop_domain}`);
        
        // R√©cup√©rer TOUS les fichiers
        const { theme, files } = await fetchThemeFiles(shop_domain, accessToken);
        const allFiles = files.map(f => f.key);
        
        const completeStructure = {
          theme_id: theme.id,
          theme_name: theme.name,
          files_analyzed: [],
          product_elements: {}
        };
        
        // Analyser tous les fichiers avec retry
        for (let i = 0; i < allFiles.length; i++) {
          const fileName = allFiles[i];
          let retryCount = 0;
          const maxRetries = 3;
          
          while (retryCount < maxRetries) {
            try {
              const content = await fetchLiquidFile(shop_domain, accessToken, theme.id, fileName);
              completeStructure.files_analyzed.push(fileName);
              
              const elements = analyzeLiquidContent(content, fileName);
              Object.assign(completeStructure.product_elements, elements);
              
              if (Object.keys(elements).length > 0) {
                console.log(`‚úÖ [Background] ${fileName} analys√© (${Object.keys(elements).length} √©l√©ments)`);
              }
              break;
              
            } catch (error) {
              retryCount++;
              if (error.message.includes('429') && retryCount < maxRetries) {
                await new Promise(resolve => setTimeout(resolve, 3000));
              } else {
                break;
              }
            }
          }
          
          // Pause anti-rate-limiting
          if (i % 3 === 0 && i > 0) {
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
        }
        
        // Am√©liorer avec Claude AI
        const completeMapping = await enhanceMappingWithAI(completeStructure, shop_domain, accessToken);
        const completeMappingId = saveMapping(shop_domain, `scan_complet_${completeStructure.theme_name}`, completeMapping);
        
        console.log(`‚úÖ SCAN COMPLET termin√©: ${Object.keys(completeMapping).length} √©l√©ments sur ${completeStructure.files_analyzed.length} fichiers`);
        
        // Sauvegarder le statut du scan complet
        const scanStatus = {
          scan_complete: true,
          complete_mapping_id: completeMappingId,
          elements_detected: Object.keys(completeMapping).length,
          files_analyzed: completeStructure.files_analyzed.length,
          completed_at: new Date().toISOString()
        };
        
        fs.writeFileSync(`scan_status_${shop_domain}.json`, JSON.stringify(scanStatus, null, 2));
        
      } catch (error) {
        console.error('‚ùå Erreur scan complet en arri√®re-plan:', error);
      }
    }, 1000); // D√©marrer apr√®s 1 seconde
    
    res.json(quickResponse);
    
  } catch (error) {
    console.error('Erreur analyse intelligente:', error);
    res.status(500).json({ error: error.message });
  }
});

// Route pour v√©rifier le statut du scan complet
app.get('/scan-status/:shop_domain', (req, res) => {
  const { shop_domain } = req.params;
  
  try {
    const statusFile = `scan_status_${shop_domain}.json`;
    if (fs.existsSync(statusFile)) {
      const status = JSON.parse(fs.readFileSync(statusFile, 'utf8'));
      res.json({
        success: true,
        scan_complete: true,
        ...status
      });
    } else {
      res.json({
        success: true,
        scan_complete: false,
        message: 'Scan complet en cours...'
      });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Route pour scan complet (tous les fichiers)
app.post('/scan-complete-theme', express.json(), async (req, res) => {
  const { shop_domain } = req.body;
  
  if (!shop_domain) {
    return res.status(400).json({ error: 'shop_domain requis' });
  }

  try {
    console.log(`üîç SCAN COMPLET du th√®me: ${shop_domain}`);
    
    // 1. R√©cup√©rer le token d'acc√®s
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopTokens = {};
    if (fs.existsSync(tokensPath)) {
      shopTokens = JSON.parse(fs.readFileSync(tokensPath));
    }
    
    const accessToken = shopTokens[shop_domain];
    if (!accessToken) {
      return res.status(401).json({ 
        error: 'Token Shopify manquant',
        message: `Aucun token trouv√© pour ${shop_domain}. Installez l'app Adlign d'abord.`
      });
    }
    
    // 2. R√©cup√©rer TOUS les fichiers du th√®me
    const { theme, files } = await fetchThemeFiles(shop_domain, accessToken);
    
    console.log(`üìÅ Scan complet: ${files.length} fichiers totaux`);
    
    // 3. Analyser TOUS les fichiers (pas seulement product-related)
    const allFiles = files.map(f => f.key);
    const themeStructure = {
      theme_id: theme.id,
      theme_name: theme.name,
      files_analyzed: [],
      product_elements: {}
    };
    
    // 4. Analyser chaque fichier avec retry
    for (let i = 0; i < allFiles.length; i++) {
      const fileName = allFiles[i];
      let retryCount = 0;
      const maxRetries = 3;
      
      while (retryCount < maxRetries) {
        try {
          const content = await fetchLiquidFile(shop_domain, accessToken, theme.id, fileName);
          themeStructure.files_analyzed.push(fileName);
          
          // Analyser le contenu pour d√©tecter les √©l√©ments
          const elements = analyzeLiquidContent(content, fileName);
          Object.assign(themeStructure.product_elements, elements);
          
          if (Object.keys(elements).length > 0) {
            console.log(`‚úÖ ${fileName} analys√© (${Object.keys(elements).length} √©l√©ments d√©tect√©s)`);
          }
          break;
          
        } catch (error) {
          retryCount++;
          if (error.message.includes('429') && retryCount < maxRetries) {
            console.warn(`‚ö†Ô∏è Rate limit (429) pour ${fileName}, retry ${retryCount}/${maxRetries} dans 3s...`);
            await new Promise(resolve => setTimeout(resolve, 3000));
          } else {
            console.warn(`‚ö†Ô∏è Erreur analyse ${fileName}: ${error.message}`);
            break;
          }
        }
      }
      
      // Pause plus longue pour √©viter le rate limiting
      if (i % 3 === 0 && i > 0) {
        console.log(`‚è∏Ô∏è Pause de 2s apr√®s ${i} fichiers analys√©s...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    // 5. Am√©liorer avec Claude AI
    const enhancedMapping = await enhanceMappingWithAI(themeStructure, shop_domain, accessToken);
    
    // 6. Sauvegarder le mapping complet
    const mappingId = saveMapping(shop_domain, `scan_complet_${themeStructure.theme_name}`, enhancedMapping);
    
    res.json({
      success: true,
      mapping_id: mappingId,
      theme_info: {
        id: themeStructure.theme_id,
        name: themeStructure.theme_name,
        files_analyzed: themeStructure.files_analyzed.length,
        total_files: files.length
      },
      mapping: enhancedMapping,
      message: `Scan complet termin√©: ${Object.keys(enhancedMapping).length} √©l√©ments d√©tect√©s sur ${themeStructure.files_analyzed.length} fichiers analys√©s`
    });
    
  } catch (error) {
    console.error('Erreur scan complet:', error);
    res.status(500).json({ error: error.message });
  }
});

// Route pour r√©cup√©rer un mapping existant
app.get('/mapping/:mappingId', (req, res) => {
  const { mappingId } = req.params;
  
  try {
    const mapping = getMapping(mappingId);
    if (!mapping) {
      return res.status(404).json({ error: 'Mapping non trouv√©' });
    }
    
    res.json({ success: true, mapping });
  } catch (error) {
    console.error('Erreur r√©cup√©ration mapping:', error);
    res.status(500).json({ error: error.message });
  }
});

// Route pour lister tous les mappings d'un shop
app.get('/mappings/:shopDomain', (req, res) => {
  const { shopDomain } = req.params;
  
  try {
    const mappings = getAllMappings(shopDomain);
    res.json({ success: true, mappings });
  } catch (error) {
    console.error('Erreur listing mappings:', error);
    res.status(500).json({ error: error.message });
  }
});

// Route pour tester un mapping sur une page
app.post('/test-mapping', express.json(), async (req, res) => {
  const { mapping_id, test_content } = req.body;
  
  try {
    const mapping = getMapping(mapping_id);
    if (!mapping) {
      return res.status(404).json({ error: 'Mapping non trouv√©' });
    }
    
    // G√©n√©rer le script JS de test
    const testScript = generateTestScript(mapping, test_content);
    
    res.json({
      success: true,
      test_script: testScript,
      message: 'Script de test g√©n√©r√©'
    });
    
  } catch (error) {
    console.error('Erreur test mapping:', error);
    res.status(500).json({ error: error.message });
  }
});

// Route pour v√©rifier l'√©tat de l'authentification Shopify
app.get('/auth-status', (req, res) => {
  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  
  const shops = Object.keys(shopTokens);
  const status = {};
  
  shops.forEach(shop => {
    status[shop] = {
      has_token: !!shopTokens[shop],
      token_preview: shopTokens[shop] ? shopTokens[shop].substring(0, 10) + '...' : null
    };
  });
  
  res.json({
    success: true,
    shops: status,
    message: `Tokens trouv√©s pour ${shops.length} boutique(s)`
  });
});

// Route pour renouveler l'authentification Shopify
app.get('/renew-auth', (req, res) => {
  const shop = req.query.shop || 'adlign.myshopify.com';
  
  if (!shop) {
    return res.status(400).json({ error: 'Param√®tre shop requis' });
  }
  
  const redirectUri = `${process.env.SHOPIFY_APP_URL || 'http://localhost:3000'}/auth/callback`;
  const installUrl =
    `https://${shop}/admin/oauth/authorize` +
    `?client_id=${process.env.SHOPIFY_API_KEY || 'your_api_key'}` +
    `&scope=${process.env.SHOPIFY_SCOPES || 'read_products,write_products,read_themes,write_themes'}` +
    `&redirect_uri=${redirectUri}` +
    `&state=renew_auth_${Date.now()}` +
    `&grant_options[]=per-user`;

  res.json({
    success: true,
    message: 'URL de renouvellement g√©n√©r√©e',
    install_url: installUrl,
    instructions: 'Cliquez sur le lien install_url pour renouveler l\'authentification'
  });
});

// Route pour tester les permissions Shopify
app.get('/test-shopify-permissions', async (req, res) => {
  const shop = 'adlign.myshopify.com';
  const tokensPath = path.join(__dirname, 'shop_tokens.json');
  let shopTokens = {};
  
  if (fs.existsSync(tokensPath)) {
    shopTokens = JSON.parse(fs.readFileSync(tokensPath));
  }
  
  const accessToken = shopTokens[shop];
  if (!accessToken) {
    return res.status(401).json({ error: 'Token Shopify manquant' });
  }
  
  try {
    // Test 1: API Produits (devrait fonctionner)
    const productsResponse = await axios.get(`https://${shop}/admin/api/2024-07/products.json`, {
      headers: {
        'X-Shopify-Access-Token': accessToken,
      }
    });
    
    // Test 2: API Th√®mes (peut n√©cessiter des scopes sp√©ciaux)
    let themesResponse;
    try {
      themesResponse = await axios.get(`https://${shop}/admin/api/2024-07/themes.json`, {
        headers: {
          'X-Shopify-Access-Token': accessToken,
        }
      });
    } catch (error) {
      themesResponse = { error: error.response?.data || error.message };
    }
    
    res.json({
      success: true,
      tests: {
        products: {
          status: 'success',
          count: productsResponse.data.products?.length || 0
        },
        themes: themesResponse.error ? {
          status: 'error',
          error: themesResponse.error
        } : {
          status: 'success',
          count: themesResponse.data.themes?.length || 0
        }
      },
      message: 'Tests de permissions Shopify effectu√©s'
    });
    
  } catch (error) {
    res.status(500).json({ 
      error: 'Erreur test permissions',
      message: error.message 
    });
  }
});

// Route pour tester la configuration Claude API
app.get('/test-claude', async (req, res) => {
  try {
    if (!process.env.CLAUDE_API_KEY) {
      return res.status(400).json({ 
        error: 'CLAUDE_API_KEY non configur√©e',
        message: 'Ajoutez CLAUDE_API_KEY dans votre fichier .env'
      });
    }
    
    const anthropic = new Anthropic({
      apiKey: process.env.CLAUDE_API_KEY,
    });
    
    const message = await anthropic.messages.create({
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 100,
      temperature: 0.1,
      messages: [
        {
          role: "user",
          content: "Dis-moi juste 'Claude API fonctionne !' en fran√ßais"
        }
      ]
    });
    
    res.json({
      success: true,
      message: 'Claude API configur√©e et fonctionnelle',
      response: message.content[0].text,
      model: "claude-3-5-sonnet-20241022"
    });
    
  } catch (error) {
    console.error('Erreur test Claude API:', error);
    res.status(500).json({ 
      error: 'Erreur Claude API',
      message: error.message,
      details: 'V√©rifiez votre cl√© API et votre connexion internet'
    });
  }
});

// Route pour debug - lister les fichiers du th√®me
app.post('/debug-theme-files', express.json(), async (req, res) => {
  const { shop_domain } = req.body;
  
  if (!shop_domain) {
    return res.status(400).json({ error: 'shop_domain requis' });
  }

  try {
    console.log(`üîç Debug fichiers th√®me: ${shop_domain}`);
    
    // R√©cup√©rer le token d'acc√®s
    const tokens = JSON.parse(fs.readFileSync('shop_tokens.json', 'utf8'));
    const accessToken = tokens[shop_domain];
    
    if (!accessToken) {
      return res.status(401).json({ error: 'Token d\'acc√®s non trouv√©' });
    }
    
    // R√©cup√©rer les fichiers du th√®me
    const { theme, files } = await fetchThemeFiles(shop_domain, accessToken);
    
    // Filtrer les fichiers product-related
    const productFiles = files.filter(file => 
      file.key.includes('product') || 
      file.key.includes('templates') ||
      file.key.includes('sections')
    );
    
    res.json({
      success: true,
      theme: {
        id: theme.id,
        name: theme.name,
        total_files: files.length
      },
      product_files: productFiles.map(f => ({
        key: f.key,
        size: f.size
      })),
      all_files_sample: files.slice(0, 20).map(f => f.key)
    });
    
  } catch (error) {
    console.error('Erreur debug th√®me:', error);
    res.status(500).json({ error: error.message });
  }
});

// Route pour tester l'analyse avec une boutique publique
app.post('/test-public-shop', express.json(), async (req, res) => {
  const { product_url } = req.body;
  
  if (!product_url) {
    return res.status(400).json({ error: 'product_url requis' });
  }

  try {
    console.log(`üß™ Test avec boutique publique: ${product_url}`);
    
    // R√©cup√©rer le HTML de la page produit
    const html = await fetchProductPageHTML(product_url);
    
    // Analyser avec Claude
    const mapping = await analyzePageWithAI(html, product_url);
    
    res.json({
      success: true,
      mapping: mapping,
      html_length: html.length,
      message: `Analyse r√©ussie avec ${Object.keys(mapping).length} √©l√©ments d√©tect√©s`
    });
    
  } catch (error) {
    console.error('Erreur test boutique publique:', error);
    res.status(500).json({ error: error.message });
  }
});

// ===== FONCTIONS UTILITAIRES MAPPING =====

// R√©cup√©rer les fichiers Liquid/HTML du th√®me via l'API Admin Shopify
async function fetchThemeFiles(shopDomain, accessToken) {
  try {
    console.log(`üìÅ R√©cup√©ration des fichiers du th√®me pour ${shopDomain}`);
    
    // 1. R√©cup√©rer le th√®me actif
    const themesResponse = await axios.get(`https://${shopDomain}/admin/api/2024-07/themes.json`, {
      headers: {
        'X-Shopify-Access-Token': accessToken,
      }
    });
    
    const activeTheme = themesResponse.data.themes.find(theme => theme.role === 'main');
    if (!activeTheme) {
      throw new Error('Aucun th√®me actif trouv√©');
    }
    
    console.log(`‚úÖ Th√®me actif: ${activeTheme.name} (ID: ${activeTheme.id})`);
    
    // 2. R√©cup√©rer tous les fichiers du th√®me
    const filesResponse = await axios.get(`https://${shopDomain}/admin/api/2024-07/themes/${activeTheme.id}/assets.json`, {
      headers: {
        'X-Shopify-Access-Token': accessToken,
      }
    });
    
    const themeFiles = filesResponse.data.assets;
    console.log(`üìÑ ${themeFiles.length} fichiers trouv√©s dans le th√®me`);
    
    return {
      theme: activeTheme,
      files: themeFiles
    };
    
  } catch (error) {
    throw new Error(`Erreur r√©cup√©ration th√®me: ${error.message}`);
  }
}

// R√©cup√©rer le contenu d'un fichier Liquid sp√©cifique
async function fetchLiquidFile(shopDomain, accessToken, themeId, fileName) {
  try {
    const response = await axios.get(`https://${shopDomain}/admin/api/2024-07/themes/${themeId}/assets.json?asset[key]=${encodeURIComponent(fileName)}`, {
      headers: {
        'X-Shopify-Access-Token': accessToken,
      }
    });
    
    if (response.data.asset) {
      return response.data.asset.value;
    }
    
    throw new Error(`Fichier ${fileName} non trouv√©`);
    
  } catch (error) {
    throw new Error(`Erreur r√©cup√©ration fichier ${fileName}: ${error.message}`);
  }
}

// Analyser la structure du th√®me pour d√©tecter les √©l√©ments modifiables
async function analyzeThemeStructure(shopDomain, accessToken) {
  try {
    console.log(`üîç Analyse de la structure du th√®me ${shopDomain}`);
    
    // R√©cup√©rer les fichiers du th√®me
    const { theme, files } = await fetchThemeFiles(shopDomain, accessToken);
    
    // Analyser TOUS les fichiers product-related (beaucoup plus complet)
    const allProductFiles = files.filter(file => 
      file.key.includes('product') || 
      file.key.includes('collection') ||
      file.key.includes('cart') ||
      file.key.includes('media') ||
      file.key.includes('gallery') ||
      file.key.includes('reviews') ||
      file.key.includes('badge') ||
      file.key.includes('variant') ||
      file.key.includes('price') ||
      file.key.includes('title') ||
      file.key.includes('description') ||
      file.key.includes('featured') ||
      file.key.includes('recommendations')
    );
    
    console.log(`üîç ${allProductFiles.length} fichiers product-related trouv√©s`);
    
    // Analyser seulement les fichiers les plus importants (scan rapide)
    const importantFiles = allProductFiles.slice(0, 15).map(f => f.key);
    console.log(`üîç Scan rapide: ${importantFiles.length} fichiers les plus importants`);
    
    const themeStructure = {
      theme_id: theme.id,
      theme_name: theme.name,
      files_analyzed: [],
      product_elements: {}
    };
    
    // Analyser chaque fichier important avec gestion des erreurs 429
    for (let i = 0; i < importantFiles.length; i++) {
      const fileName = importantFiles[i];
      const fileExists = files.find(file => file.key === fileName);
      
      if (fileExists) {
        let retryCount = 0;
        const maxRetries = 3;
        
        while (retryCount < maxRetries) {
          try {
            const content = await fetchLiquidFile(shopDomain, accessToken, theme.id, fileName);
            themeStructure.files_analyzed.push(fileName);
            
            // Analyser le contenu Liquid pour d√©tecter les √©l√©ments
            const elements = analyzeLiquidContent(content, fileName);
            Object.assign(themeStructure.product_elements, elements);
            
            console.log(`‚úÖ ${fileName} analys√© (${Object.keys(elements).length} √©l√©ments d√©tect√©s)`);
            break; // Succ√®s, sortir de la boucle retry
            
          } catch (error) {
            retryCount++;
            if (error.message.includes('429') && retryCount < maxRetries) {
              console.warn(`‚ö†Ô∏è Rate limit (429) pour ${fileName}, retry ${retryCount}/${maxRetries} dans 2s...`);
              await new Promise(resolve => setTimeout(resolve, 2000)); // Attendre 2s
            } else {
              console.warn(`‚ö†Ô∏è Erreur analyse ${fileName}: ${error.message}`);
              break; // Sortir de la boucle retry
            }
          }
        }
        
        // Pause entre les fichiers pour √©viter le rate limiting
        if (i % 5 === 0 && i > 0) {
          console.log(`‚è∏Ô∏è Pause de 1s apr√®s ${i} fichiers analys√©s...`);
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
    }
    
    return themeStructure;
    
  } catch (error) {
    throw new Error(`Erreur analyse structure th√®me: ${error.message}`);
  }
}

// Analyser le contenu Liquid pour d√©tecter les √©l√©ments
function analyzeLiquidContent(content, fileName) {
  const elements = {};
  
      // D√©tecter les √©l√©ments bas√©s sur les patterns Liquid/Shopify (√âTENDU)
    const patterns = {
      // === CONTENU TEXTUEL ===
      product_title: [
        /{{ product\.title }}/g,
        /{{ product\.name }}/g,
        /<h1[^>]*class="[^"]*product[^"]*"[^>]*>/gi,
        /<h1[^>]*class="[^"]*title[^"]*"[^>]*>/gi,
        /<h2[^>]*class="[^"]*product[^"]*"[^>]*>/gi
      ],
      product_description: [
        /{{ product\.description }}/g,
        /{{ product\.body_html }}/g,
        /<div[^>]*class="[^"]*description[^"]*"[^>]*>/gi,
        /<p[^>]*class="[^"]*description[^"]*"[^>]*>/gi
      ],
      product_ingredients: [
        /{{ product\.metafields\.ingredients }}/g,
        /{{ product\.metafields\.custom\.ingredients }}/g,
        /ingredients[^}]*{{/gi
      ],
      product_specifications: [
        /{{ product\.metafields\.specifications }}/g,
        /{{ product\.metafields\.custom\.specs }}/g,
        /specifications[^}]*{{/gi,
        /<div[^>]*class="[^"]*specifications[^"]*"[^>]*>/gi,
        /<div[^>]*class="[^"]*specs[^"]*"[^>]*>/gi
      ],
      product_features: [
        /{{ product\.metafields\.features }}/g,
        /features[^}]*{{/gi,
        /<div[^>]*class="[^"]*features[^"]*"[^>]*>/gi
      ],
      product_benefits: [
        /{{ product\.metafields\.benefits }}/g,
        /benefits[^}]*{{/gi,
        /<div[^>]*class="[^"]*benefits[^"]*"[^>]*>/gi
      ],
      
      // === PRIX ET COMMERCIAL ===
      product_price: [
        /{{ product\.price }}/g,
        /{{ product\.price | money }}/g,
        /{{ current_variant\.price | money }}/g,
        /<span[^>]*class="[^"]*price[^"]*"[^>]*>/gi,
        /<div[^>]*class="[^"]*price[^"]*"[^>]*>/gi
      ],
      product_compare_price: [
        /{{ product\.compare_at_price }}/g,
        /{{ product\.compare_at_price | money }}/g,
        /{{ current_variant\.compare_at_price | money }}/g
      ],
      product_savings: [
        /{{ product\.compare_at_price | minus: product\.price }}/g,
        /savings[^}]*{{/gi
      ],
      
      // === IMAGES ET M√âDIA ===
      product_main_image: [
        /{{ product\.featured_image }}/g,
        /{{ product\.featured_image | img_url: 'large' }}/g,
        /{{ product\.featured_image | img_url: 'master' }}/g,
        /<img[^>]*class="[^"]*product[^"]*"[^>]*>/gi,
        /<img[^>]*class="[^"]*featured[^"]*"[^>]*>/gi
      ],
      product_gallery: [
        /{% for image in product\.images %}/g,
        /{% for media in product\.media %}/g,
        /{{ product\.images }}/g,
        /gallery[^}]*{{/gi
      ],
      product_video: [
        /{% for media in product\.media %}/g,
        /{{ media\.media_type }}/g,
        /video[^}]*{{/gi
      ],
      
      // === VARIANTS ET OPTIONS ===
      product_variants: [
        /{% for variant in product\.variants %}/g,
        /{{ product\.variants }}/g,
        /variant[^}]*{{/gi
      ],
      variant_selector: [
        /<select[^>]*data-variant[^>]*>/gi,
        /<select[^>]*name="[^"]*variant[^"]*"[^>]*>/gi,
        /single-option-selector/gi
      ],
      
      // === CTA ET FORMULAIRES ===
      add_to_cart: [
        /<button[^>]*class="[^"]*add-to-cart[^"]*"[^>]*>/gi,
        /<input[^>]*type="submit"[^>]*value="[^"]*cart[^"]*"[^>]*>/gi,
        /{{ 'products.product.add_to_cart' | t }}/g,
        /{% form 'product' %}/g
      ],
      buy_now: [
        /{{ 'products.product.buy_now' | t }}/g,
        /buy-now[^}]*{{/gi
      ],
      
      // === BADGES ET MARKETING ===
      product_badges: [
        /{% if product\.tags contains 'sale' %}/g,
        /{% if product\.tags contains 'new' %}/g,
        /{% if product\.tags contains 'featured' %}/g,
        /{% if product\.tags contains 'limited' %}/g,
        /{% if product\.tags contains 'eco' %}/g,
        /badge[^}]*{{/gi,
        /tag[^}]*{{/gi,
        /<span[^>]*class="[^"]*badge[^"]*"[^>]*>/gi,
        /<div[^>]*class="[^"]*badge[^"]*"[^>]*>/gi
      ],
      product_urgency: [
        /{{ product\.inventory_quantity }}/g,
        /{{ product\.inventory_management }}/g,
        /urgency[^}]*{{/gi,
        /stock[^}]*{{/gi,
        /<span[^>]*class="[^"]*urgency[^"]*"[^>]*>/gi,
        /<div[^>]*class="[^"]*stock[^"]*"[^>]*>/gi
      ],
      product_countdown: [
        /countdown[^}]*{{/gi,
        /timer[^}]*{{/gi,
        /<div[^>]*class="[^"]*countdown[^"]*"[^>]*>/gi
      ],
      
      // === AVIS ET R√âPUTATION ===
      product_reviews: [
        /{% render 'product-reviews' %}/g,
        /{{ product\.reviews }}/g,
        /shopify-product-reviews/gi,
        /reviews[^}]*{{/gi
      ],
      product_rating: [
        /{{ product\.rating }}/g,
        /{{ product\.rating_value }}/g,
        /rating[^}]*{{/gi
      ],
      
      // === INFORMATIONS SUPPL√âMENTAIRES ===
      product_sku: [
        /{{ product\.sku }}/g,
        /{{ current_variant\.sku }}/g
      ],
      product_vendor: [
        /{{ product\.vendor }}/g,
        /vendor[^}]*{{/gi
      ],
      product_type: [
        /{{ product\.type }}/g,
        /type[^}]*{{/gi
      ],
      
      // === RECOMMANDATIONS ===
      product_recommendations: [
        /{% render 'product-recommendations' %}/g,
        /{{ product\.recommendations }}/g,
        /recommendations[^}]*{{/gi
      ],
      
      // === NAVIGATION ET LIENS ===
      product_navigation: [
        /breadcrumb[^}]*{{/gi,
        /<nav[^>]*class="[^"]*breadcrumb[^"]*"[^>]*>/gi,
        /<div[^>]*class="[^"]*breadcrumb[^"]*"[^>]*>/gi
      ],
      product_related: [
        /related[^}]*{{/gi,
        /<div[^>]*class="[^"]*related[^"]*"[^>]*>/gi
      ],
      
      // === √âL√âMENTS DE CONFIANCE ===
      product_trust_badges: [
        /trust[^}]*{{/gi,
        /guarantee[^}]*{{/gi,
        /<div[^>]*class="[^"]*trust[^"]*"[^>]*>/gi,
        /<div[^>]*class="[^"]*guarantee[^"]*"[^>]*>/gi
      ],
      product_shipping: [
        /shipping[^}]*{{/gi,
        /delivery[^}]*{{/gi,
        /<div[^>]*class="[^"]*shipping[^"]*"[^>]*>/gi
      ],
      
      // === √âL√âMENTS DE CONVERSION ===
      product_upsell: [
        /upsell[^}]*{{/gi,
        /cross-sell[^}]*{{/gi,
        /<div[^>]*class="[^"]*upsell[^"]*"[^>]*>/gi
      ],
      product_discount: [
        /discount[^}]*{{/gi,
        /coupon[^}]*{{/gi,
        /<div[^>]*class="[^"]*discount[^"]*"[^>]*>/gi
      ]
    };
  
  // Analyser chaque pattern
  for (const [elementType, patternList] of Object.entries(patterns)) {
    for (const pattern of patternList) {
      if (pattern.test(content)) {
        // Extraire les vrais s√©lecteurs CSS du contenu
        const cssSelectors = extractCSSSelectors(content, elementType);
        
        elements[elementType] = {
          type: elementType,
          file: fileName,
          patterns: patternList.map(p => p.source),
          css_selectors: cssSelectors,
          description: `√âl√©ment ${elementType} d√©tect√© dans ${fileName}`
        };
        break;
      }
    }
  }
  
  return elements;
}

// Extraire les vrais s√©lecteurs CSS du contenu Liquid
function extractCSSSelectors(content, elementType) {
  const selectors = [];
  
  // Patterns pour extraire les classes CSS r√©elles (√âTENDU)
  const cssPatterns = {
    product_title: [
      /<h1[^>]*class="([^"]*)"[^>]*>/gi,
      /<h2[^>]*class="([^"]*)"[^>]*>/gi,
      /<h3[^>]*class="([^"]*)"[^>]*>/gi,
      /<div[^>]*class="([^"]*)"[^>]*>/gi,
      /<span[^>]*class="([^"]*)"[^>]*>/gi
    ],
    product_price: [
      /<span[^>]*class="([^"]*)"[^>]*>/gi,
      /<div[^>]*class="([^"]*)"[^>]*>/gi,
      /<p[^>]*class="([^"]*)"[^>]*>/gi,
      /<strong[^>]*class="([^"]*)"[^>]*>/gi
    ],
    product_description: [
      /<div[^>]*class="([^"]*)"[^>]*>/gi,
      /<p[^>]*class="([^"]*)"[^>]*>/gi,
      /<section[^>]*class="([^"]*)"[^>]*>/gi
    ],
    add_to_cart: [
      /<button[^>]*class="([^"]*)"[^>]*>/gi,
      /<input[^>]*class="([^"]*)"[^>]*>/gi,
      /<a[^>]*class="([^"]*)"[^>]*>/gi
    ],
    product_image: [
      /<img[^>]*class="([^"]*)"[^>]*>/gi,
      /<div[^>]*class="([^"]*)"[^>]*>/gi,
      /<figure[^>]*class="([^"]*)"[^>]*>/gi
    ],
    product_badges: [
      /<span[^>]*class="([^"]*)"[^>]*>/gi,
      /<div[^>]*class="([^"]*)"[^>]*>/gi,
      /<p[^>]*class="([^"]*)"[^>]*>/gi
    ],
    product_reviews: [
      /<div[^>]*class="([^"]*)"[^>]*>/gi,
      /<section[^>]*class="([^"]*)"[^>]*>/gi,
      /<article[^>]*class="([^"]*)"[^>]*>/gi
    ],
    product_variants: [
      /<select[^>]*class="([^"]*)"[^>]*>/gi,
      /<div[^>]*class="([^"]*)"[^>]*>/gi,
      /<fieldset[^>]*class="([^"]*)"[^>]*>/gi
    ]
  };
  
  const patterns = cssPatterns[elementType] || [];
  
  for (const pattern of patterns) {
    let match;
    while ((match = pattern.exec(content)) !== null) {
      const classes = match[1].split(' ').filter(cls => cls.trim());
      selectors.push(...classes.map(cls => `.${cls}`));
    }
  }
  
  // D√©dupliquer et filtrer les s√©lecteurs pertinents (√âTENDU)
  const uniqueSelectors = [...new Set(selectors)];
  const relevantSelectors = uniqueSelectors.filter(selector => 
    selector.includes('product') || 
    selector.includes('title') || 
    selector.includes('price') || 
    selector.includes('description') ||
    selector.includes('cart') ||
    selector.includes('image') ||
    selector.includes('badge') ||
    selector.includes('review') ||
    selector.includes('variant') ||
    selector.includes('gallery') ||
    selector.includes('media') ||
    selector.includes('form') ||
    selector.includes('button') ||
    selector.includes('tag') ||
    selector.includes('sale') ||
    selector.includes('new') ||
    selector.includes('featured') ||
    selector.includes('urgent') ||
    selector.includes('stock') ||
    selector.includes('countdown') ||
    selector.includes('trust') ||
    selector.includes('guarantee') ||
    selector.includes('shipping') ||
    selector.includes('discount')
  );
  
  return relevantSelectors.slice(0, 5); // Limiter √† 5 s√©lecteurs max
}

// Am√©liorer le mapping avec Claude AI
async function enhanceMappingWithAI(themeStructure, shopDomain, accessToken) {
  const anthropic = new Anthropic({
    apiKey: process.env.CLAUDE_API_KEY,
  });
  
  try {
    console.log('ü§ñ Am√©lioration du mapping avec Claude AI...');
    
    // Pr√©parer les donn√©es pour Claude
    const themeData = {
      theme_name: themeStructure.theme_name,
      files_analyzed: themeStructure.files_analyzed,
      elements_detected: Object.keys(themeStructure.product_elements)
    };
    
    // Pr√©parer le contenu des fichiers pour Claude
    const fileContents = {};
    for (const fileName of themeStructure.files_analyzed) {
      try {
        const content = await fetchLiquidFile(shopDomain, accessToken, themeStructure.theme_id, fileName);
        fileContents[fileName] = content.substring(0, 2000); // Limiter la taille
      } catch (error) {
        console.warn(`‚ö†Ô∏è Impossible de r√©cup√©rer ${fileName}: ${error.message}`);
      }
    }

    const prompt = `Tu es un expert en analyse de th√®mes Shopify. Analyse le contenu r√©el des fichiers Liquid et g√©n√®re un mapping pr√©cis des √©l√©ments modifiables.

TH√àME: ${themeData.theme_name}
FICHIERS ANALYS√âS: ${themeData.files_analyzed.join(', ')}

CONTENU DES FICHIERS LIQUID:
${Object.entries(fileContents).map(([fileName, content]) => 
  `\n--- ${fileName} ---\n${content}\n---`
).join('\n')}

T√ÇCHE: Analyse le contenu Liquid ci-dessus et g√©n√®re un mapping JSON pr√©cis des √©l√©ments de page produit.

R√àGLES STRICTES:
1. **N'INVENTE PAS** de s√©lecteurs CSS - utilise UNIQUEMENT ceux pr√©sents dans le code Liquid
2. **Extrais les vrais s√©lecteurs** des balises HTML dans le code Liquid
3. **Identifie les patterns Liquid** comme {{ product.title }}, {{ product.price | money }}
4. **Sois pr√©cis** - ne g√©n√®re que des s√©lecteurs qui existent r√©ellement

√âL√âMENTS √Ä D√âTECTER:
- product_title: Titre principal du produit
- product_price: Prix du produit  
- product_description: Description du produit
- product_image: Image principale du produit
- add_to_cart: Bouton d'ajout au panier
- product_reviews: Section avis/√©toiles
- variant_selector: S√©lecteurs de variantes
- product_badges: Badges/promotions
- product_gallery: Galerie d'images
- additional_info: Informations suppl√©mentaires

FORMAT DE R√âPONSE JSON STRICT:
{
  "product_title": {
    "type": "text",
    "selector": "S√âLECTEUR_CSS_R√âEL_EXTRAIT_DU_CODE",
    "description": "Description pr√©cise",
    "liquid_files": ["fichier_o√π_trouv√©.liquid"],
    "liquid_patterns": ["{{ product.title }}"]
  }
}

EXEMPLE D'EXTRACTION:
Si tu vois dans le code: <h1 class="product-title">{{ product.title }}</h1>
Alors le s√©lecteur doit √™tre: ".product-title"

IMPORTANT: Ne g√©n√®re que des s√©lecteurs CSS qui existent r√©ellement dans le code Liquid fourni.`;

    const message = await anthropic.messages.create({
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 4000,
      temperature: 0.1,
      messages: [
        {
          role: "user",
          content: prompt
        }
      ]
    });

    // Extraire le JSON de la r√©ponse de Claude
    const responseText = message.content[0].text;
    console.log('üìù R√©ponse Claude:', responseText.substring(0, 200) + '...');
    
    // Essayer d'extraire le JSON de la r√©ponse
    let jsonMatch = responseText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Format JSON non trouv√© dans la r√©ponse Claude');
    }
    
    const enhancedMapping = JSON.parse(jsonMatch[0]);
    
    // Fusionner avec les √©l√©ments d√©tect√©s par l'analyse Liquid
    const finalMapping = { ...themeStructure.product_elements, ...enhancedMapping };
    
    console.log(`‚úÖ Mapping am√©lior√© avec ${Object.keys(finalMapping).length} √©l√©ments`);
    return finalMapping;
    
  } catch (error) {
    console.error('‚ùå Erreur Claude AI:', error);
    
    // Fallback vers le mapping bas√© sur l'analyse Liquid
    console.log('üîÑ Fallback vers mapping Liquid...');
    return themeStructure.product_elements;
  }
}

// Analyser la page avec Claude API (ancienne m√©thode - gard√©e pour compatibilit√©)
async function analyzePageWithAI(html, productUrl) {
  const anthropic = new Anthropic({
    apiKey: process.env.CLAUDE_API_KEY,
  });
  
  try {
    console.log('ü§ñ Analyse avec Claude API...');
    
    // Pr√©parer le prompt pour Claude
    const prompt = `Tu es un expert en analyse de pages web Shopify. Analyse ce HTML de page produit et identifie tous les √©l√©ments modifiables.

URL de la page: ${productUrl}

T√¢che: D√©tecte et mappe tous les √©l√©ments importants de cette page produit Shopify qui peuvent √™tre personnalis√©s pour des campagnes marketing.

√âl√©ments √† d√©tecter:
1. Titre principal du produit
2. Prix du produit
3. Description du produit
4. Image principale du produit
5. Bouton "Ajouter au panier" ou CTA principal
6. Section avis/√©toiles
7. S√©lecteur de variantes (taille, couleur, etc.)
8. Badges/promotions
9. Images secondaires/galerie
10. Informations suppl√©mentaires (ingr√©dients, caract√©ristiques, etc.)

Pour chaque √©l√©ment d√©tect√©, fournis:
- Un s√©lecteur CSS pr√©cis et robuste
- Le type d'√©l√©ment (text, image, button, price, reviews, variants, badges, gallery)
- Une description claire
- La valeur actuelle extraite

Format de r√©ponse JSON strict:
{
  "product_title": {
    "type": "text",
    "selector": "h1.product-title, h1.product__title, h1.title",
    "description": "Titre principal du produit",
    "current_value": "Nom du produit"
  },
  "product_price": {
    "type": "price", 
    "selector": ".price, .product__price, [data-price]",
    "description": "Prix du produit",
    "current_value": "19,90‚Ç¨"
  }
}

R√®gles importantes:
- Utilise des s√©lecteurs CSS robustes qui fonctionnent sur diff√©rents th√®mes
- Inclus plusieurs s√©lecteurs alternatifs s√©par√©s par des virgules
- Extrais le texte r√©el des √©l√©ments (pas de HTML)
- Sois pr√©cis dans les descriptions
- Ne retourne QUE du JSON valide, pas de texte suppl√©mentaire

HTML √† analyser:
${html.substring(0, 15000)} // Limite pour √©viter les tokens excessifs

Analyse ce HTML et retourne le mapping JSON.`;

    const message = await anthropic.messages.create({
      model: "claude-3-5-sonnet-20241022",
      max_tokens: 4000,
      temperature: 0.1, // Faible temp√©rature pour des r√©sultats coh√©rents
      messages: [
        {
          role: "user",
          content: prompt
        }
      ]
    });

    // Extraire le JSON de la r√©ponse de Claude
    const responseText = message.content[0].text;
    console.log('üìù R√©ponse Claude:', responseText.substring(0, 200) + '...');
    
    // Essayer d'extraire le JSON de la r√©ponse
    let jsonMatch = responseText.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Format JSON non trouv√© dans la r√©ponse Claude');
    }
    
    const mapping = JSON.parse(jsonMatch[0]);
    
    // Validation et nettoyage du mapping
    const cleanedMapping = {};
    for (const [key, element] of Object.entries(mapping)) {
      if (element && typeof element === 'object' && element.selector) {
        cleanedMapping[key] = {
          type: element.type || 'text',
          selector: element.selector,
          description: element.description || key,
          current_value: element.current_value || ''
        };
      }
    }
    
    console.log(`‚úÖ Mapping g√©n√©r√© avec ${Object.keys(cleanedMapping).length} √©l√©ments`);
    return cleanedMapping;
    
  } catch (error) {
    console.error('‚ùå Erreur Claude API:', error);
    
    // Fallback vers l'analyse bas√©e sur les patterns si Claude √©choue
    console.log('üîÑ Fallback vers analyse par patterns...');
    return analyzePageWithPatterns(html, productUrl);
  }
}

// Fonction de fallback bas√©e sur les patterns (ancienne m√©thode)
function analyzePageWithPatterns(html, productUrl) {
  const mapping = {};
  
  // Extraire le titre du produit
  const titleMatch = html.match(/<h1[^>]*class="[^"]*product-title[^"]*"[^>]*>(.*?)<\/h1>/i) ||
                    html.match(/<h1[^>]*class="[^"]*product__title[^"]*"[^>]*>(.*?)<\/h1>/i) ||
                    html.match(/<h1[^>]*class="[^"]*title[^"]*"[^>]*>(.*?)<\/h1>/i);
  
  if (titleMatch) {
    mapping.product_title = {
      type: 'text',
      selector: 'h1.product-title, h1.product__title, h1.title',
      description: 'Titre principal du produit',
      current_value: titleMatch[1].replace(/<[^>]*>/g, '').trim()
    };
  }
  
  // Extraire le prix
  const priceMatch = html.match(/<span[^>]*class="[^"]*price[^"]*"[^>]*>([^<]*)<\/span>/i) ||
                    html.match(/<span[^>]*class="[^"]*product__price[^"]*"[^>]*>([^<]*)<\/span>/i);
  
  if (priceMatch) {
    mapping.product_price = {
      type: 'price',
      selector: '.price, .product__price',
      description: 'Prix du produit',
      current_value: priceMatch[1].trim()
    };
  }
  
  // Extraire la description
  const descMatch = html.match(/<div[^>]*class="[^"]*product-description[^"]*"[^>]*>(.*?)<\/div>/is) ||
                   html.match(/<div[^>]*class="[^"]*description[^"]*"[^>]*>(.*?)<\/div>/is);
  
  if (descMatch) {
    mapping.product_description = {
      type: 'text',
      selector: '.product-description, .description',
      description: 'Description du produit',
      current_value: descMatch[1].replace(/<[^>]*>/g, '').trim().substring(0, 200) + '...'
    };
  }
  
  // Extraire l'image principale
  const imageMatch = html.match(/<img[^>]*class="[^"]*product-image[^"]*"[^>]*src="([^"]*)"/i) ||
                    html.match(/<img[^>]*class="[^"]*product__image[^"]*"[^>]*src="([^"]*)"/i);
  
  if (imageMatch) {
    mapping.product_image = {
      type: 'image',
      selector: '.product-image img, .product__image img',
      description: 'Image principale du produit',
      current_value: imageMatch[1]
    };
  }
  
  // Extraire le bouton CTA
  const ctaMatch = html.match(/<button[^>]*class="[^"]*add-to-cart[^"]*"[^>]*>(.*?)<\/button>/i) ||
                  html.match(/<button[^>]*class="[^"]*btn[^"]*"[^>]*>(.*?)<\/button>/i);
  
  if (ctaMatch) {
    mapping.add_to_cart_button = {
      type: 'button',
      selector: '.add-to-cart, .btn',
      description: 'Bouton Ajouter au panier',
      current_value: ctaMatch[1].replace(/<[^>]*>/g, '').trim()
    };
  }
  
  // Extraire les avis/√©toiles
  const reviewMatch = html.match(/<div[^>]*class="[^"]*reviews[^"]*"[^>]*>(.*?)<\/div>/is) ||
                     html.match(/<div[^>]*class="[^"]*rating[^"]*"[^>]*>(.*?)<\/div>/is);
  
  if (reviewMatch) {
    mapping.product_reviews = {
      type: 'reviews',
      selector: '.reviews, .rating',
      description: 'Section avis et √©toiles',
      current_value: 'Avis clients'
    };
  }
  
  // Extraire les variantes (taille, couleur, etc.)
  const variantMatch = html.match(/<select[^>]*class="[^"]*variant[^"]*"[^>]*>(.*?)<\/select>/is) ||
                      html.match(/<div[^>]*class="[^"]*product-options[^"]*"[^>]*>(.*?)<\/div>/is);
  
  if (variantMatch) {
    mapping.product_variants = {
      type: 'variants',
      selector: '.variant, .product-options',
      description: 'S√©lecteur de variantes (taille, couleur)',
      current_value: 'Variantes disponibles'
    };
  }
  
  // Extraire les badges/promotions
  const badgeMatch = html.match(/<span[^>]*class="[^"]*badge[^"]*"[^>]*>(.*?)<\/span>/i) ||
                    html.match(/<div[^>]*class="[^"]*promo[^"]*"[^>]*>(.*?)<\/div>/i);
  
  if (badgeMatch) {
    mapping.product_badges = {
      type: 'badges',
      selector: '.badge, .promo',
      description: 'Badges et promotions',
      current_value: badgeMatch[1].replace(/<[^>]*>/g, '').trim()
    };
  }
  
  return mapping;
}

// Sauvegarder un mapping
function saveMapping(shopDomain, productUrl, mapping) {
  const mappingsPath = path.join(__dirname, 'mappings.json');
  let mappings = {};
  
  if (fs.existsSync(mappingsPath)) {
    mappings = JSON.parse(fs.readFileSync(mappingsPath));
  }
  
  if (!mappings[shopDomain]) {
    mappings[shopDomain] = {};
  }
  
  const mappingId = `mapping_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  mappings[shopDomain][mappingId] = {
    id: mappingId,
    product_url: productUrl,
    mapping: mapping,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
  
  fs.writeFileSync(mappingsPath, JSON.stringify(mappings, null, 2));
  console.log(`‚úÖ Mapping sauvegard√©: ${mappingId} pour ${shopDomain}`);
  
  return mappingId;
}

// R√©cup√©rer un mapping
function getMapping(mappingId) {
  const mappingsPath = path.join(__dirname, 'mappings.json');
  
  if (!fs.existsSync(mappingsPath)) {
    return null;
  }
  
  const mappings = JSON.parse(fs.readFileSync(mappingsPath));
  
  for (const shopDomain in mappings) {
    if (mappings[shopDomain][mappingId]) {
      return mappings[shopDomain][mappingId];
    }
  }
  
  return null;
}

// R√©cup√©rer tous les mappings d'un shop
function getAllMappings(shopDomain) {
  const mappingsPath = path.join(__dirname, 'mappings.json');
  
  if (!fs.existsSync(mappingsPath)) {
    return [];
  }
  
  const mappings = JSON.parse(fs.readFileSync(mappingsPath));
  return mappings[shopDomain] ? Object.values(mappings[shopDomain]) : [];
}

// G√©n√©rer un script de test pour un mapping
function generateTestScript(mapping, testContent) {
  const { mapping: elements } = mapping;
  
  let script = `
// Script de test pour le mapping: ${mapping.id}
// Page: ${mapping.product_url}

(function() {
  console.log('üß™ Test du mapping Adlign...');
  
  const testContent = ${JSON.stringify(testContent, null, 2)};
  
  // Fonction pour remplacer le contenu
  function replaceContent(selector, newContent, type) {
    const elements = document.querySelectorAll(selector);
    if (elements.length === 0) {
      console.warn('‚ö†Ô∏è S√©lecteur non trouv√©:', selector);
      return false;
    }
    
    elements.forEach((element, index) => {
      switch(type) {
        case 'text':
          element.textContent = newContent;
          break;
        case 'image':
          element.src = newContent;
          break;
        case 'button':
          element.textContent = newContent;
          break;
        case 'price':
          element.textContent = newContent;
          break;
        default:
          element.innerHTML = newContent;
      }
      console.log('‚úÖ Remplac√©:', selector, '->', newContent);
    });
    
    return true;
  }
  
  // Application du mapping
  const results = {
    success: 0,
    failed: 0,
    details: []
  };
  
`;

  // Ajouter les remplacements pour chaque √©l√©ment
  for (const [key, element] of Object.entries(elements)) {
    if (testContent[key]) {
      script += `
  // ${element.description}
  if (replaceContent('${element.selector}', '${testContent[key]}', '${element.type}')) {
    results.success++;
    results.details.push({ element: '${key}', status: 'success' });
  } else {
    results.failed++;
    results.details.push({ element: '${key}', status: 'failed', selector: '${element.selector}' });
  }
`;
    }
  }
  
  script += `
  console.log('üìä R√©sultats du test:', results);
  console.log('üéØ Mapping test√© avec succ√®s!');
})();
`;

  return script;
}

// ========================================
// üöÄ ENDPOINTS SAAS POUR LOVABLE
// ========================================

// Configuration CORS s√©curis√©e
const allowedOrigins = [
  'http://localhost:5173',
  'https://lovable.dev',
  'https://adlign-creative-flow.vercel.app'
];

app.use('/api/saas', cors({
  origin: function (origin, callback) {
    // Autoriser les requ√™tes sans origin (mobile apps, Postman, etc.)
    if (!origin) return callback(null, true);
    
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('CORS: Origin non autoris√©e'));
    }
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  maxAge: 86400 // 24h
}));

// 1. Connexion Shopify pour le SaaS
app.post('/api/saas/connect-shopify', express.json(), async (req, res) => {
  const { shop_domain } = req.body;
  
  if (!shop_domain) {
    return res.status(400).json({ 
      success: false, 
      error: 'shop_domain requis' 
    });
  }

  try {
    // G√©n√©rer l'URL OAuth pour le frontend
    const redirectUri = `${SHOPIFY_APP_URL}/auth/callback`;
    const oauthUrl = `https://${shop_domain}/admin/oauth/authorize` +
      `?client_id=${SHOPIFY_API_KEY}` +
      `&scope=${SHOPIFY_SCOPES}` +
      `&redirect_uri=${redirectUri}` +
      `&state=saas_${Date.now()}` +
      `&grant_options[]=per-user`;

    res.json({
      success: true,
      oauth_url: oauthUrl,
      message: 'URL OAuth g√©n√©r√©e pour le frontend'
    });
  } catch (error) {
    console.error('Erreur g√©n√©ration OAuth SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la g√©n√©ration OAuth'
    });
  }
});

// 2. Lister les boutiques connect√©es
app.get('/api/saas/stores', async (req, res) => {
  try {
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopTokens = {};
    
    if (fs.existsSync(tokensPath)) {
      shopTokens = JSON.parse(fs.readFileSync(tokensPath));
    }

    const stores = Object.keys(shopTokens).map(shop => ({
      domain: shop,
      connected: true,
      connected_at: new Date().toISOString(), // Approximation
      status: 'active'
    }));

    res.json({
      success: true,
      stores: stores,
      total: stores.length
    });
  } catch (error) {
    console.error('Erreur r√©cup√©ration stores:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des boutiques'
    });
  }
});

// 3. Cr√©er une landing page via SaaS
app.post('/api/saas/landings', express.json(), async (req, res) => {
  const { shop_domain, landing_data } = req.body;
  
  if (!shop_domain || !landing_data) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain et landing_data requis'
    });
  }

  try {
    // Utiliser la fonction existante de cr√©ation de landing
    const landingWithMeta = {
      ...landing_data,
      id: `landing_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      shop_domain: shop_domain,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const landingsPath = path.join(__dirname, 'local_landings.json');
    let allLandings = {};
    
    if (fs.existsSync(landingsPath)) {
      allLandings = JSON.parse(fs.readFileSync(landingsPath));
    }
    
    if (!allLandings[shop_domain]) {
      allLandings[shop_domain] = {};
    }
    
    allLandings[shop_domain][landing_data.handle] = landingWithMeta;
    fs.writeFileSync(landingsPath, JSON.stringify(allLandings, null, 2));

    res.json({
      success: true,
      message: `Landing page "${landing_data.handle}" cr√©√©e via SaaS`,
      landing: landingWithMeta,
      storage_type: "local_json"
    });
  } catch (error) {
    console.error('Erreur cr√©ation landing SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la cr√©ation de la landing page'
    });
  }
});

// 4. R√©cup√©rer une landing page
app.get('/api/saas/landings/:handle', async (req, res) => {
  const { handle } = req.params;
  const { shop_domain } = req.query;
  
  if (!shop_domain) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain requis en query parameter'
    });
  }

  try {
    const landingsPath = path.join(__dirname, 'local_landings.json');
    
    if (!fs.existsSync(landingsPath)) {
      return res.status(404).json({
        success: false,
        error: 'Aucune landing page trouv√©e'
      });
    }

    const allLandings = JSON.parse(fs.readFileSync(landingsPath));
    const shopLandings = allLandings[shop_domain] || {};
    const landing = shopLandings[handle];

    if (!landing) {
      return res.status(404).json({
        success: false,
        error: `Landing page "${handle}" non trouv√©e`
      });
    }

    res.json({
      success: true,
      landing: landing
    });
  } catch (error) {
    console.error('Erreur r√©cup√©ration landing SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration de la landing page'
    });
  }
});

// 5. Lister toutes les landings d'un shop
app.get('/api/saas/landings', async (req, res) => {
  const { shop_domain } = req.query;
  
  if (!shop_domain) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain requis en query parameter'
    });
  }

  try {
    const landingsPath = path.join(__dirname, 'local_landings.json');
    
    if (!fs.existsSync(landingsPath)) {
      return res.json({
        success: true,
        landings: [],
        total: 0
      });
    }

    const allLandings = JSON.parse(fs.readFileSync(landingsPath));
    const shopLandings = allLandings[shop_domain] || {};
    const landings = Object.values(shopLandings);

    res.json({
      success: true,
      landings: landings,
      total: landings.length
    });
  } catch (error) {
    console.error('Erreur r√©cup√©ration landings SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des landing pages'
    });
  }
});

// 6. Mettre √† jour une landing page
app.put('/api/saas/landings/:handle', express.json(), async (req, res) => {
  const { handle } = req.params;
  const { shop_domain, landing_data } = req.body;
  
  if (!shop_domain || !landing_data) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain et landing_data requis'
    });
  }

  try {
    const landingsPath = path.join(__dirname, 'local_landings.json');
    
    if (!fs.existsSync(landingsPath)) {
      return res.status(404).json({
        success: false,
        error: 'Aucune landing page trouv√©e'
      });
    }

    const allLandings = JSON.parse(fs.readFileSync(landingsPath));
    const shopLandings = allLandings[shop_domain] || {};
    
    if (!shopLandings[handle]) {
      return res.status(404).json({
        success: false,
        error: `Landing page "${handle}" non trouv√©e`
      });
    }

    // Mettre √† jour la landing
    const updatedLanding = {
      ...shopLandings[handle],
      ...landing_data,
      updated_at: new Date().toISOString()
    };

    allLandings[shop_domain][handle] = updatedLanding;
    fs.writeFileSync(landingsPath, JSON.stringify(allLandings, null, 2));

    res.json({
      success: true,
      message: `Landing page "${handle}" mise √† jour`,
      landing: updatedLanding
    });
  } catch (error) {
    console.error('Erreur mise √† jour landing SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la mise √† jour de la landing page'
    });
  }
});

// 7. Supprimer une landing page
app.delete('/api/saas/landings/:handle', async (req, res) => {
  const { handle } = req.params;
  const { shop_domain } = req.query;
  
  if (!shop_domain) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain requis en query parameter'
    });
  }

  try {
    const landingsPath = path.join(__dirname, 'local_landings.json');
    
    if (!fs.existsSync(landingsPath)) {
      return res.status(404).json({
        success: false,
        error: 'Aucune landing page trouv√©e'
      });
    }

    const allLandings = JSON.parse(fs.readFileSync(landingsPath));
    const shopLandings = allLandings[shop_domain] || {};
    
    if (!shopLandings[handle]) {
      return res.status(404).json({
        success: false,
        error: `Landing page "${handle}" non trouv√©e`
      });
    }

    // Supprimer la landing
    delete allLandings[shop_domain][handle];
    fs.writeFileSync(landingsPath, JSON.stringify(allLandings, null, 2));

    res.json({
      success: true,
      message: `Landing page "${handle}" supprim√©e`
    });
  } catch (error) {
    console.error('Erreur suppression landing SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la suppression de la landing page'
    });
  }
});

// 8. Analyser un th√®me via SaaS
app.post('/api/saas/analyze-theme', express.json(), async (req, res) => {
  const { shop_domain } = req.body;
  
  if (!shop_domain) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain requis'
    });
  }

  try {
    // V√©rifier que le shop est connect√©
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopTokens = {};
    
    if (fs.existsSync(tokensPath)) {
      shopTokens = JSON.parse(fs.readFileSync(tokensPath));
    }

    const accessToken = shopTokens[shop_domain];
    if (!accessToken) {
      return res.status(401).json({
        success: false,
        error: 'Boutique non connect√©e. Connectez d\'abord la boutique Shopify.'
      });
    }

    // Utiliser la fonction existante d'analyse
    const mapping = await analyzeThemeStructure(shop_domain, accessToken);
    
    if (!mapping || !mapping.mapping || Object.keys(mapping.mapping).length === 0) {
      return res.status(400).json({
        success: false,
        error: 'Aucun √©l√©ment d√©tect√© dans le th√®me'
      });
    }

    res.json({
      success: true,
      message: 'Analyse du th√®me termin√©e',
      mapping: mapping,
      elements_count: Object.keys(mapping.mapping).length
    });
  } catch (error) {
    console.error('Erreur analyse th√®me SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de l\'analyse du th√®me'
    });
  }
});

// 9. M√©triques et analytics
app.get('/api/saas/analytics', async (req, res) => {
  const { shop_domain } = req.query;
  
  try {
    // Compter les landings
    const landingsPath = path.join(__dirname, 'local_landings.json');
    let landingsCount = 0;
    
    if (fs.existsSync(landingsPath)) {
      const allLandings = JSON.parse(fs.readFileSync(landingsPath));
      if (shop_domain) {
        landingsCount = Object.keys(allLandings[shop_domain] || {}).length;
      } else {
        landingsCount = Object.values(allLandings).reduce((total, shop) => total + Object.keys(shop).length, 0);
      }
    }

    // Compter les mappings
    const mappingsPath = path.join(__dirname, 'mappings.json');
    let mappingsCount = 0;
    
    if (fs.existsSync(mappingsPath)) {
      const allMappings = JSON.parse(fs.readFileSync(mappingsPath));
      if (shop_domain) {
        mappingsCount = Object.keys(allMappings[shop_domain] || {}).length;
      } else {
        mappingsCount = Object.values(allMappings).reduce((total, shop) => total + Object.keys(shop).length, 0);
      }
    }

    // Compter les boutiques connect√©es
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopsCount = 0;
    
    if (fs.existsSync(tokensPath)) {
      const shopTokens = JSON.parse(fs.readFileSync(tokensPath));
      shopsCount = Object.keys(shopTokens).length;
    }

    res.json({
      success: true,
      analytics: {
        total_shops: shopsCount,
        total_landings: landingsCount,
        total_mappings: mappingsCount,
        shop_domain: shop_domain || 'all'
      }
    });
  } catch (error) {
    console.error('Erreur r√©cup√©ration analytics SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des m√©triques'
    });
  }
});

// 10. Duplication de page produit avec metaobjects
app.post('/api/saas/duplicate-product-page', express.json(), async (req, res) => {
  const { shop_domain, product_id, landing_handle, mapping_id } = req.body;
  
  if (!shop_domain || !product_id || !landing_handle || !mapping_id) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain, product_id, landing_handle et mapping_id requis'
    });
  }

  try {
    // 1. V√©rifier que le shop est connect√©
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopTokens = {};
    
    if (fs.existsSync(tokensPath)) {
      shopTokens = JSON.parse(fs.readFileSync(tokensPath));
    }

    const accessToken = shopTokens[shop_domain];
    if (!accessToken) {
      return res.status(401).json({
        success: false,
        error: 'Boutique non connect√©e. Connectez d\'abord la boutique Shopify.'
      });
    }

    // 2. R√©cup√©rer le mapping
    const mapping = getMapping(mapping_id);
    if (!mapping) {
      return res.status(404).json({
        success: false,
        error: `Mapping "${mapping_id}" non trouv√©`
      });
    }

    // 3. R√©cup√©rer la landing page
    const landingsPath = path.join(__dirname, 'local_landings.json');
    let landing = null;
    
    if (fs.existsSync(landingsPath)) {
      const allLandings = JSON.parse(fs.readFileSync(landingsPath));
      landing = allLandings[shop_domain]?.[landing_handle];
    }

    if (!landing) {
      return res.status(404).json({
        success: false,
        error: `Landing page "${landing_handle}" non trouv√©e`
      });
    }

    // 4. R√©cup√©rer le produit original
    const productResponse = await axios.get(
      `https://${shop_domain}/admin/api/2024-07/products/${product_id}.json`,
      {
        headers: {
          'X-Shopify-Access-Token': accessToken,
        },
      }
    );

    const product = productResponse.data.product;

    // 5. Cr√©er les metaobjects selon le mapping (version simplifi√©e)
    const metaobjectFields = [];
    const mappingData = mapping.mapping;
    const landingData = landing;

    // Pour l'instant, cr√©ons seulement les champs de base qui existent dans notre d√©finition
    const basicFields = [
      {
        key: "custom_title",
        value: landingData.custom_title || product.title
      },
      {
        key: "custom_description", 
        value: landingData.custom_description || product.body_html
      },
      {
        key: "custom_price_text",
        value: landingData.custom_price_text || `$${product.variants[0].price}`
      },
      {
        key: "custom_cta_text",
        value: landingData.custom_cta_text || 'Add to Cart'
      },
      {
        key: "custom_vendor",
        value: landingData.custom_vendor || product.vendor
      },
      {
        key: "is_active",
        value: "true"
      }
    ];

    metaobjectFields.push(...basicFields);

        // 6. Cr√©er les m√©tadonn√©es du produit au lieu des metaobjects
    const metadata = {
      metafields: [
        {
          namespace: "adlign",
          key: "landing_handle",
          value: landing_handle,
          type: "single_line_text_field"
        },
        {
          namespace: "adlign",
          key: "mapping_id",
          value: mapping_id,
          type: "single_line_text_field"
        },
        {
          namespace: "adlign",
          key: "campaign_name",
          value: landingData.campaign_name || "Campaign",
          type: "single_line_text_field"
        },
        ...metaobjectFields.map(field => ({
          namespace: "adlign",
          key: field.key,
          value: field.value,
          type: "single_line_text_field"
        }))
      ]
    };

    // 7. Cr√©er les m√©tadonn√©es via l'API Shopify
    console.log('üì¶ Donn√©es m√©tadonn√©es √† cr√©er:', JSON.stringify(metadata, null, 2));
    
    // Cr√©er chaque m√©tadonn√©e individuellement
    const createdMetafields = [];
    for (const metafield of metadata.metafields) {
      const metafieldResponse = await axios.post(
        `https://${shop_domain}/admin/api/2024-07/products/${product_id}/metafields.json`,
        { metafield },
        {
          headers: {
            'X-Shopify-Access-Token': accessToken,
            'Content-Type': 'application/json',
          },
        }
      );
      createdMetafields.push(metafieldResponse.data.metafield);
    }

    // 8. G√©n√©rer l'URL de la page dupliqu√©e
    const duplicatedPageUrl = `https://${shop_domain}/products/${product.handle}?landing=${landing_handle}`;

    res.json({
      success: true,
      message: `Page produit dupliqu√©e avec m√©tadonn√©es pour "${landing_handle}"`,
      data: {
        product_id: product_id,
        product_handle: product.handle,
        landing_handle: landing_handle,
        mapping_id: mapping_id,
        metafields_created: createdMetafields.length,
        duplicated_page_url: duplicatedPageUrl,
        metafields: createdMetafields.map(mf => ({ key: mf.key, value: mf.value })),
        mapping_elements: Object.keys(mappingData).length
      }
    });

  } catch (error) {
    console.error('Erreur duplication page produit:', error.response?.data || error.message);
    console.error('üìã D√©tails complets de l\'erreur:', JSON.stringify(error.response?.data, null, 2));
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la duplication de la page produit',
      details: error.response?.data || error.message
    });
  }
});

// 11. R√©cup√©rer un mapping sp√©cifique
app.get('/api/saas/mapping/:mapping_id', async (req, res) => {
  const { mapping_id } = req.params;
  
  try {
    const mapping = getMapping(mapping_id);
    if (!mapping) {
      return res.status(404).json({
        success: false,
        error: `Mapping "${mapping_id}" non trouv√©`
      });
    }

    res.json({
      success: true,
      mapping: mapping.mapping,
      metadata: {
        shop_domain: mapping.shop_domain,
        product_url: mapping.product_url,
        created_at: mapping.created_at
      }
    });

  } catch (error) {
    console.error('Erreur r√©cup√©ration mapping:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration du mapping',
      details: error.message
    });
  }
});

// 12. R√©cup√©rer les m√©tadonn√©es d'un produit
app.post('/api/saas/product-metafields', express.json(), async (req, res) => {
  const { shop_domain, product_id } = req.body;
  
  if (!shop_domain || !product_id) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain et product_id requis'
    });
  }

  try {
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopTokens = {};
    
    if (fs.existsSync(tokensPath)) {
      shopTokens = JSON.parse(fs.readFileSync(tokensPath));
    }

    const accessToken = shopTokens[shop_domain];
    if (!accessToken) {
      return res.status(401).json({
        success: false,
        error: 'Boutique non connect√©e'
      });
    }

    // R√©cup√©rer les m√©tadonn√©es du produit
    const metafieldsResponse = await axios.get(
      `https://${shop_domain}/admin/api/2024-07/products/${product_id}/metafields.json?namespace=adlign`,
      {
        headers: {
          'X-Shopify-Access-Token': accessToken,
        },
      }
    );

    res.json({
      success: true,
      metafields: metafieldsResponse.data.metafields || []
    });

  } catch (error) {
    console.error('Erreur r√©cup√©ration m√©tadonn√©es produit:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des m√©tadonn√©es',
      details: error.response?.data || error.message
    });
  }
});

// 13. Test des m√©tadonn√©es
app.get('/api/saas/test-metafields/:shop_domain', async (req, res) => {
  const { shop_domain } = req.params;
  
  try {
    const tokensPath = path.join(__dirname, 'shop_tokens.json');
    let shopTokens = {};
    
    if (fs.existsSync(tokensPath)) {
      shopTokens = JSON.parse(fs.readFileSync(tokensPath));
    }

    const accessToken = shopTokens[shop_domain];
    if (!accessToken) {
      return res.status(401).json({
        success: false,
        error: 'Boutique non connect√©e'
      });
    }

    // Test 1: V√©rifier les m√©tadonn√©es existantes
    const metafieldsResponse = await axios.get(
      `https://${shop_domain}/admin/api/2024-07/metafields.json`,
      {
        headers: {
          'X-Shopify-Access-Token': accessToken,
        },
      }
    );

    // Test 2: V√©rifier les m√©tadonn√©es d'un produit sp√©cifique
    const productMetafieldsResponse = await axios.get(
      `https://${shop_domain}/admin/api/2024-07/products/15096939610438/metafields.json`,
      {
        headers: {
          'X-Shopify-Access-Token': accessToken,
        },
      }
    );

    res.json({
      success: true,
      metafields: metafieldsResponse.data,
      product_metafields: productMetafieldsResponse.data
    });

  } catch (error) {
    console.error('Erreur test m√©tadonn√©es:', error.response?.data || error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du test des m√©tadonn√©es',
      details: error.response?.data || error.message
    });
  }
});

// 12. Test complet du workflow SaaS
app.post('/api/saas/test-workflow', express.json(), async (req, res) => {
  const { shop_domain, landing_handle } = req.body;
  
  if (!shop_domain || !landing_handle) {
    return res.status(400).json({
      success: false,
      error: 'shop_domain et landing_handle requis'
    });
  }

  try {
    // R√©cup√©rer la landing
    const landingsPath = path.join(__dirname, 'local_landings.json');
    let landing = null;
    
    if (fs.existsSync(landingsPath)) {
      const allLandings = JSON.parse(fs.readFileSync(landingsPath));
      landing = allLandings[shop_domain]?.[landing_handle];
    }

    if (!landing) {
      return res.status(404).json({
        success: false,
        error: `Landing page "${landing_handle}" non trouv√©e`
      });
    }

    // R√©cup√©rer le mapping
    const mapping = getMapping(landing.mapping_id);
    if (!mapping) {
      return res.status(404).json({
        success: false,
        error: `Mapping "${landing.mapping_id}" non trouv√©`
      });
    }

    // G√©n√©rer les remplacements
    const replacements = {};
    const landingData = landing;
    const mappingData = mapping.mapping;

    // Mapper le contenu personnalis√© aux s√©lecteurs
    if (landingData.custom_title && mappingData.product_title) {
      replacements[mappingData.product_title.selector] = {
        content: landingData.custom_title,
        type: 'text'
      };
    }
    if (landingData.custom_description && mappingData.product_description) {
      replacements[mappingData.product_description.selector] = {
        content: landingData.custom_description,
        type: 'text'
      };
    }
    if (landingData.custom_price_text && mappingData.product_price) {
      replacements[mappingData.product_price.selector] = {
        content: landingData.custom_price_text,
        type: 'text'
      };
    }
    if (landingData.custom_cta_text && mappingData.add_to_cart_button) {
      replacements[mappingData.add_to_cart_button.selector] = {
        content: landingData.custom_cta_text,
        type: 'text'
      };
    }
    if (landingData.custom_main_image && mappingData.product_main_image) {
      replacements[mappingData.product_main_image.selector] = {
        content: landingData.custom_main_image,
        type: 'image'
      };
    }

    // G√©n√©rer le script JS
    const jsScript = generateLandingScript(replacements, landingData);

    res.json({
      success: true,
      message: `Workflow SaaS test√© pour "${landing_handle}"`,
      landing: landing,
      mapping: mappingData,
      replacements: replacements,
      elements_count: Object.keys(replacements).length,
      js_script: jsScript
    });
  } catch (error) {
    console.error('Erreur test workflow SaaS:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du test du workflow'
    });
  }
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`üöÄ Serveur backend lanc√© sur http://localhost:${PORT}`);
  console.log(`üéØ Endpoints SaaS disponibles sur /api/saas/`);
});
