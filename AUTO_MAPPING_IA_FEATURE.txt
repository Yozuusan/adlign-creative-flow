====================================
ü§ñ FEATURE AUTO-MAPPING IA ADLIGN - DOCUMENTATION COMPL√àTE
====================================

## üéØ OBJECTIF DE LA FEATURE

L'auto-mapping IA permet de d√©tecter automatiquement les s√©lecteurs CSS corrects pour chaque √©l√©ment modifiable d'une page produit Shopify, en analysant la structure du th√®me avec l'IA Claude.

**Probl√®me r√©solu :** 
- Chaque th√®me Shopify a des s√©lecteurs CSS diff√©rents (.product-title vs .product__title vs h1.title)
- Impossible de deviner manuellement les bons s√©lecteurs pour chaque th√®me
- L'IA analyse le code Liquid r√©el et g√©n√®re un mapping pr√©cis

## üèóÔ∏è ARCHITECTURE TECHNIQUE

### 1. COMPOSANTS PRINCIPAUX

#### A. Analyse du Th√®me Shopify
```
GET /generate-mapping?shop_domain=XXX
‚îú‚îÄ‚îÄ R√©cup√©ration des fichiers Liquid du th√®me actif
‚îú‚îÄ‚îÄ Scan des templates (product.liquid, product.json)
‚îú‚îÄ‚îÄ Analyse des sections/snippets inclus
‚îî‚îÄ‚îÄ Extraction des patterns HTML/CSS
```

#### B. Enhancement par IA Claude
```
enhanceMappingWithAI()
‚îú‚îÄ‚îÄ Envoi du code Liquid √† Claude 3.5 Sonnet
‚îú‚îÄ‚îÄ Prompt sp√©cialis√© pour d√©tection d'√©l√©ments Shopify
‚îú‚îÄ‚îÄ G√©n√©ration mapping JSON avec scoring de confiance
‚îî‚îÄ‚îÄ Validation et nettoyage des r√©sultats
```

#### C. Stockage et R√©cup√©ration
```
saveMapping() / getMapping()
‚îú‚îÄ‚îÄ Stockage local avec ID unique
‚îú‚îÄ‚îÄ Cl√©: {shop_domain}_{theme_name}_{timestamp}
‚îú‚îÄ‚îÄ Cache persistant des mappings g√©n√©r√©s
‚îî‚îÄ‚îÄ API de r√©cup√©ration: GET /mapping/:mappingId
```

### 2. ENDPOINTS D√âVELOPP√âS

#### `/generate-mapping` (POST)
**Fonction :** G√©n√©ration compl√®te d'un mapping pour un th√®me
**Param√®tres :**
- shop_domain (requis)
- access_token (automatique depuis shop_tokens.json)

**Processus :**
1. R√©cup√©ration th√®me actif via Shopify API
2. Download des fichiers Liquid critiques
3. Analyse structure HTML/CSS 
4. Enhancement par Claude AI
5. Sauvegarde mapping avec ID unique

**Retour :**
```json
{
  "success": true,
  "mapping_id": "adlign_myshopify_com_dawn_1704657123",
  "theme_name": "Dawn",
  "elements_detected": 8,
  "mapping": {
    "product_title": {
      "selector": ".product__title h1",
      "confidence": 0.95,
      "fallbacks": ["h1.product-title", ".product-title"]
    },
    "product_price": {
      "selector": ".price__current .money",
      "confidence": 0.9,
      "fallbacks": [".product-price", ".price"]
    },
    // ... autres √©l√©ments
  }
}
```

#### `/generate-mapping-quick` (POST)
**Fonction :** Version rapide - scan des templates principaux seulement
**Optimisation :** Pour tests rapides et prototypage

#### `/generate-mapping-complete` (POST) 
**Fonction :** Scan exhaustif de TOUS les fichiers du th√®me
**Usage :** Mapping de production ultra-pr√©cis

#### `/mapping/:mappingId` (GET)
**Fonction :** R√©cup√©ration d'un mapping existant
**Retour :** Mapping complet avec m√©tadonn√©es

#### `/mappings/:shopDomain` (GET)
**Fonction :** Liste tous les mappings d'un shop
**Usage :** Historique et gestion des versions

#### `/test-mapping` (POST)
**Fonction :** Test d'un mapping avec contenu personnalis√©
**Usage :** Validation avant d√©ploiement

#### `/analyze-page` (POST)
**Fonction :** Analyse directe d'une page HTML avec Claude
**Usage :** Mapping √† partir d'une page captur√©e

### 3. INTELLIGENCE ARTIFICIELLE - CLAUDE INTEGRATION

#### Configuration
```javascript
const anthropic = new Anthropic({
  apiKey: process.env.CLAUDE_API_KEY,
});
```

#### Prompt Sp√©cialis√© pour Shopify
```
Tu es un expert en analyse de th√®mes Shopify. Analyse le contenu r√©el des fichiers Liquid et g√©n√®re un mapping pr√©cis des √©l√©ments modifiables.

√âL√âMENTS √Ä D√âTECTER:
1. product_title: Titre principal du produit
2. product_price: Prix actuel (pas barr√©/compar√©)  
3. add_to_cart: Bouton d'ajout au panier principal
4. product_description: Description riche du produit
5. product_image: Image principale produit
6. product_gallery: Galerie d'images
7. variant_selector: S√©lecteurs de variantes
8. product_reviews: Section avis clients

CRIT√àRES QUALIT√â:
- Priorit√© aux s√©lecteurs sp√©cifiques vs g√©n√©riques
- √âviter header/footer/navigation
- Cibler √©l√©ments dans la zone produit principale
- Fournir fallbacks si possible
- Scorer la confiance (0-1)

FORMAT RETOUR: JSON pur sans markdown
```

#### Mod√®le Utilis√©
- **Claude 3.5 Sonnet** (claude-3-5-sonnet-20241022)
- Choisi pour sa pr√©cision en analyse de code
- Excellente compr√©hension des patterns Shopify

#### Fallback Syst√®me
Si Claude API √©choue :
1. Fallback vers analyse bas√©e sur patterns connus
2. S√©lecteurs Shopify standards (.product__title, .price, etc.)
3. Mapping g√©n√©rique fonctionnel minimal

## üîß FONCTIONS CL√âS D√âVELOPP√âES

### `enhanceMappingWithAI(themeStructure, shopDomain, accessToken)`
**R√¥le :** C≈ìur de l'intelligence artificielle
**Entr√©e :** Structure th√®me brute + fichiers Liquid
**Processus :**
1. Pr√©paration donn√©es pour Claude (fichiers + contexte)
2. Envoi prompt sp√©cialis√© √† Claude API
3. Parsing r√©ponse JSON de Claude
4. Validation et enrichissement
5. Fusion avec analyse Liquid basique

**Sortie :** Mapping enrichi avec scores de confiance

### `saveMapping(shopDomain, identifier, mapping)`
**R√¥le :** Persistance des mappings g√©n√©r√©s
**Stockage :** Fichier JSON local (production: BDD recommand√©e)
**ID Format :** `{shopDomain}_{identifier}_{timestamp}`

### `getAllMappings(shopDomain)`
**R√¥le :** R√©cup√©ration historique des mappings d'un shop
**Usage :** Versioning et comparaison des mappings

### `generateTestScript(mapping, testContent)`
**R√¥le :** G√©n√©ration script JS de test pour un mapping
**Usage :** Validation c√¥t√© client des s√©lecteurs

## üìä EXEMPLES DE MAPPINGS G√âN√âR√âS

### Th√®me Dawn (d√©faut Shopify)
```json
{
  "product_title": {
    "selector": ".product__title h1",
    "confidence": 0.95,
    "fallbacks": ["h1.product-title", ".product-title"]
  },
  "product_price": {
    "selector": ".price__current .money",
    "confidence": 0.9, 
    "fallbacks": [".product-price", ".price"]
  },
  "add_to_cart": {
    "selector": ".product-form__buttons button[type='submit']",
    "confidence": 0.9,
    "fallbacks": ["button[name='add']", ".btn--add-to-cart"]
  },
  "product_description": {
    "selector": ".product__description .rte",
    "confidence": 0.85,
    "fallbacks": [".product-description", ".product__text"]
  }
}
```

### Th√®me Custom Complexe
```json
{
  "product_title": {
    "selector": ".product-single__title",
    "confidence": 0.92,
    "fallbacks": [".product-title", "h1"]
  },
  "product_price": {
    "selector": ".product-single__price .money",
    "confidence": 0.88,
    "fallbacks": [".price", ".product-price"]
  },
  "add_to_cart": {
    "selector": ".product-single__cart-submit",
    "confidence": 0.93,
    "fallbacks": ["button[type='submit']"]
  }
}
```

## üîÑ WORKFLOW COMPLET D'UTILISATION

### √âtape 1 : G√©n√©ration du Mapping
```bash
POST /generate-mapping
{
  "shop_domain": "adlign.myshopify.com"
}

# Retour
{
  "mapping_id": "adlign_myshopify_com_dawn_1704657123",
  "mapping": { ... }
}
```

### √âtape 2 : Int√©gration Frontend
```javascript
// Au lieu de s√©lecteurs hardcod√©s
const selectors = {
  title: 'h1',  // ‚ùå G√©n√©rique
  price: '.price'  // ‚ùå Peut ne pas marcher
};

// Utiliser le mapping IA
fetch(`/mapping/${mappingId}`)
  .then(res => res.json())
  .then(data => {
    const mapping = data.mapping;
    const titleSelector = mapping.product_title.selector;  // ‚úÖ Pr√©cis
    const priceSelector = mapping.product_price.selector;  // ‚úÖ Test√© par IA
  });
```

### √âtape 3 : Application avec Fallbacks
```javascript
function findElement(mapping, elementType) {
  const config = mapping[elementType];
  
  // Essayer s√©lecteur principal
  let element = document.querySelector(config.selector);
  
  // Fallbacks si √©chec
  if (!element && config.fallbacks) {
    for (const fallback of config.fallbacks) {
      element = document.querySelector(fallback);
      if (element) break;
    }
  }
  
  return element;
}
```

## üöÄ AVANTAGES DE LA SOLUTION

### ‚úÖ Pr√©cision
- Analyse du code Liquid r√©el (pas de devinettes)
- IA sp√©cialis√©e en patterns Shopify
- Scoring de confiance pour chaque s√©lecteur

### ‚úÖ Robustesse  
- Syst√®me de fallbacks automatique
- Gestion d'erreur avec mapping g√©n√©rique
- Validation avant sauvegarde

### ‚úÖ Performance
- Cache des mappings g√©n√©r√©s
- Scan rapide vs complet selon besoins
- Pas de re-analyse √† chaque visite

### ‚úÖ √âvolutivit√©
- Support de nouveaux √©l√©ments facilement
- Am√©lioration continue des prompts IA
- Historique et versioning des mappings

## üéØ √âTAT ACTUEL VS UTILISATION

### ‚úÖ CE QUI EST D√âVELOPP√â ET FONCTIONNEL
- Tous les endpoints d'auto-mapping
- Int√©gration Claude AI compl√®te
- Stockage et r√©cup√©ration des mappings
- Tests et validation

### ‚ùå CE QUI MANQUE ACTUELLEMENT
- **Connexion frontend** : Le script Liquid utilise encore des s√©lecteurs hardcod√©s
- **Workflow automatique** : Pas de g√©n√©ration auto du mapping lors de la premi√®re visite
- **Interface utilisateur** : Pas d'UI pour g√©rer les mappings

## üîß PROCHAINE √âTAPE CRITIQUE

**CONNECTER L'AUTO-MAPPING AU SCRIPT FRONTEND :**

1. G√©n√©rer mapping pour le th√®me actuel :
   ```bash
   POST /generate-mapping {"shop_domain": "adlign.myshopify.com"}
   ```

2. Modifier le script Liquid pour utiliser le mapping au lieu des s√©lecteurs hardcod√©s

3. Test et validation sur page produit r√©elle

**C'est LA solution au probl√®me actuel !** üéØ

====================================
