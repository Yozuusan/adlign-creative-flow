<!-- 
===========================================
üßπ ADLIGN - NETTOYAGE ET RED√âMARRAGE FORC√â
===========================================
Script qui nettoie l'ancien et force le nouveau
-->

<script>
console.log('üßπ [ADLIGN CLEAN] === NETTOYAGE FORC√â ===');

// 1. NETTOYAGE COMPLET DES ANCIENNES VARIABLES
console.log('üóëÔ∏è [ADLIGN CLEAN] Suppression des anciennes variables...');
delete window.AdlignActivated;
delete window.AdlignAPIActive;
delete window.AdlignHardcodedActive;
delete window.AdlignAPIData;
delete window.AdlignConfig;
delete window.debugAdlign;
delete window.debugAdlignHardcoded;

// 2. V√âRIFICATION DU NETTOYAGE
console.log('‚úÖ [ADLIGN CLEAN] Variables supprim√©es');
console.log('   AdlignActivated:', window.AdlignActivated);
console.log('   AdlignAPIActive:', window.AdlignAPIActive);
console.log('   AdlignIntegrationActive:', window.AdlignIntegrationActive);

// 3. GARDE-FOU GLOBAL POUR NOTRE NOUVEAU SCRIPT
if (window.AdlignIntegrationActive) {
  console.log('üîÑ [ADLIGN CLEAN] Script d√©j√† initialis√© - red√©marrage...');
  delete window.AdlignIntegrationActive;
}

// 4. INITIALISATION PROPRE
window.AdlignIntegrationActive = true;
console.log('üöÄ [ADLIGN CLEAN] Initialisation du nouveau script...');

// 5. D√âTECTION PARAM√àTRES URL
const urlParams = new URLSearchParams(window.location.search);
const adlignVariant = urlParams.get('adlign_variant');

if (!adlignVariant) {
  console.log('üîç [ADLIGN CLEAN] Aucun param√®tre adlign_variant - mode normal');
  return;
}

console.log(`üéØ [ADLIGN CLEAN] Param√®tre d√©tect√©: ${adlignVariant}`);

// 6. CONFIGURATION DES CAMPAGNES (SIMPLE POUR TEST)
const campaigns = {
  'test': {
    campaign_name: 'Test Campaign - Clean',
    changes: {
      title: 'üßπ NETTOYAGE R√âUSSI - NOUVEAU SCRIPT ACTIF',
      price: '99,99‚Ç¨ <span style="color:green;">‚úÖ CLEAN</span>',
      cta: 'üßπ SCRIPT NETTOY√â',
      description: '<p><strong>‚úÖ Nouveau script actif !</strong> L\'ancien script a √©t√© supprim√©.</p>'
    }
  }
};

// 7. S√âLECTEURS SIMPLES POUR TEST IMM√âDIAT
const simpleSelectors = {
  title: ['h1', '.product-title', '.product__title'],
  price: ['.price', '.product-price', '.money'],
  cta: ['button[type="submit"]', '[name="add"]', '.btn'],
  description: ['.product__description', '.rte', '.description']
};

// 8. FONCTION DE TEST IMM√âDIAT
function testSelectors() {
  console.log('üéØ [ADLIGN CLEAN] Test des s√©lecteurs...');
  
  Object.entries(simpleSelectors).forEach(([type, selectorList]) => {
    for (const selector of selectorList) {
      try {
        const elements = document.querySelectorAll(selector);
        if (elements.length > 0) {
          console.log(`‚úÖ [ADLIGN CLEAN] ${type} ‚Üí ${selector} (${elements.length} √©l√©ments)`);
          return; // Premier s√©lecteur qui marche
        }
      } catch (error) {
        console.log(`‚ùå [ADLIGN CLEAN] ${selector} ‚Üí ERREUR`);
      }
    }
    console.log(`‚ö†Ô∏è [ADLIGN CLEAN] ${type} ‚Üí Aucun s√©lecteur trouv√©`);
  });
}

// 9. APPLICATION IMM√âDIATE DES CHANGEMENTS
function applyTestChanges() {
  const campaign = campaigns[adlignVariant];
  if (!campaign) {
    console.log(`‚ùå [ADLIGN CLEAN] Campaign '${adlignVariant}' non trouv√©e`);
    return;
  }
  
  console.log(`üé® [ADLIGN CLEAN] Application des changements pour ${campaign.campaign_name}`);
  
  let changementsAppliques = 0;
  
  Object.entries(simpleSelectors).forEach(([type, selectorList]) => {
    if (!campaign.changes[type]) return;
    
    for (const selector of selectorList) {
      try {
        const elements = document.querySelectorAll(selector);
        if (elements.length > 0) {
          elements.forEach(element => {
            // Marquer comme transform√©
            element.setAttribute('data-adlign-clean', 'true');
            element.setAttribute('data-adlign-variant', adlignVariant);
            
            // Appliquer le changement
            if (type === 'description' || type === 'price') {
              element.innerHTML = campaign.changes[type];
            } else {
              element.textContent = campaign.changes[type];
            }
            
            // Animation verte
            element.style.background = 'rgba(34, 197, 94, 0.3)';
            element.style.transition = 'background 0.5s ease';
            setTimeout(() => element.style.background = '', 3000);
            
            changementsAppliques++;
            console.log(`‚ú® [ADLIGN CLEAN] ${type} modifi√© avec ${selector}`);
          });
          break; // Premier s√©lecteur qui marche
        }
      } catch (error) {
        console.log(`‚ùå [ADLIGN CLEAN] Erreur ${selector}:`, error.message);
      }
    }
  });
  
  if (changementsAppliques > 0) {
    // Notification de succ√®s
    const notification = document.createElement('div');
    notification.innerHTML = `
      <strong>üßπ ${campaign.campaign_name}</strong><br>
      <small>${changementsAppliques} √©l√©ments modifi√©s</small><br>
      <small>‚úÖ Ancien script supprim√©</small>
    `;
    notification.style.cssText = `
      position: fixed; top: 20px; right: 20px; 
      background: linear-gradient(135deg, #22c55e, #16a34a); 
      color: white; padding: 15px 20px; border-radius: 12px; 
      font-weight: 600; z-index: 9999; box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      border: 2px solid rgba(255,255,255,0.2);
    `;
    document.body.appendChild(notification);
    setTimeout(() => {
      if (document.body.contains(notification)) {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }
    }, 5000);
    
    console.log(`üéâ [ADLIGN CLEAN] Succ√®s ! ${changementsAppliques} √©l√©ments modifi√©s`);
  } else {
    console.log(`‚ö†Ô∏è [ADLIGN CLEAN] Aucune modification appliqu√©e - v√©rifiez les s√©lecteurs`);
  }
}

// 10. EX√âCUTION IMM√âDIATE
console.log('‚ö° [ADLIGN CLEAN] D√©but de l\'ex√©cution...');
testSelectors();
applyTestChanges();

// 11. VARIABLES DE DEBUG
window.AdlignCleanDebug = {
  variant: adlignVariant,
  active: true,
  changedElements: document.querySelectorAll('[data-adlign-clean="true"]').length
};

window.debugAdlignClean = function() {
  console.log('üîç [DEBUG CLEAN]');
  console.log('- Variant:', window.AdlignCleanDebug?.variant);
  console.log('- √âl√©ments modifi√©s:', window.AdlignCleanDebug?.changedElements);
  console.log('- Variables anciennes supprim√©es:', !window.AdlignActivated);
  
  // Test s√©lecteurs
  console.log('üéØ Test s√©lecteurs actuels:');
  Object.entries(simpleSelectors).forEach(([type, selectors]) => {
    console.log(`  ${type}:`);
    selectors.forEach(selector => {
      try {
        const count = document.querySelectorAll(selector).length;
        console.log(`    ${selector}: ${count} √©l√©ments`);
      } catch (error) {
        console.log(`    ${selector}: ERREUR`);
      }
    });
  });
};

console.log('üí° [ADLIGN CLEAN] Tapez debugAdlignClean() pour d√©bugger');
console.log('üéØ [ADLIGN CLEAN] === NETTOYAGE TERMIN√â ===');
</script>
